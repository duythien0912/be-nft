[{"/Users/mac/Desktop/hackathon/bsc-coupon/src/index.js":"1","/Users/mac/Desktop/hackathon/bsc-coupon/src/App.js":"2","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/init.js":"3","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/history.js":"4","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/CreateCoupon.js":"5","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Main.js":"6","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Header.js":"7","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/ViewCoupon.js":"8","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Faucet.js":"9","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/config.js":"10","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/AlertModal.js":"11","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/SuccessModal.js":"12","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Loading.js":"13","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/DisplayTickets.js":"14","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/BuyTicket.js":"15","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Claim.js":"16","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/time.js":"17","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/precision.js":"18","/Users/mac/Desktop/hackathon/bsc-coupon/src/api/getBnbUsdt.js":"19","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/musicBlock.js":"20","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/image/imageBlock.js":"21","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/video/videoBlock.js":"22","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/flow/flowBlock.js":"23","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/playListBlock.js":"24","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/musicTable.js":"25","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/market/marketPage.js":"26","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/account/accountPage.js":"27","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/CreateNft.js":"28","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/nft/nftPage.js":"29"},{"size":363,"mtime":1621682100021,"results":"30","hashOfConfig":"31"},{"size":1403,"mtime":1621952439417,"results":"32","hashOfConfig":"31"},{"size":1532,"mtime":1621750067026,"results":"33","hashOfConfig":"31"},{"size":93,"mtime":1621608591880,"results":"34","hashOfConfig":"31"},{"size":15464,"mtime":1621608591879,"results":"35","hashOfConfig":"31"},{"size":7384,"mtime":1621954228512,"results":"36","hashOfConfig":"31"},{"size":6345,"mtime":1621954664317,"results":"37","hashOfConfig":"31"},{"size":14210,"mtime":1621666179386,"results":"38","hashOfConfig":"31"},{"size":4570,"mtime":1621608591879,"results":"39","hashOfConfig":"31"},{"size":352,"mtime":1621921318810,"results":"40","hashOfConfig":"31"},{"size":534,"mtime":1621608591878,"results":"41","hashOfConfig":"31"},{"size":643,"mtime":1621608591880,"results":"42","hashOfConfig":"31"},{"size":382,"mtime":1621734181176,"results":"43","hashOfConfig":"31"},{"size":1334,"mtime":1621608591879,"results":"44","hashOfConfig":"31"},{"size":6486,"mtime":1621608591879,"results":"45","hashOfConfig":"31"},{"size":5049,"mtime":1621608591879,"results":"46","hashOfConfig":"31"},{"size":838,"mtime":1621665548570,"results":"47","hashOfConfig":"31"},{"size":351,"mtime":1621665553255,"results":"48","hashOfConfig":"31"},{"size":470,"mtime":1621946606496,"results":"49","hashOfConfig":"31"},{"size":592,"mtime":1621731340919,"results":"50","hashOfConfig":"31"},{"size":1168,"mtime":1621953670267,"results":"51","hashOfConfig":"31"},{"size":825,"mtime":1621953602099,"results":"52","hashOfConfig":"31"},{"size":1733,"mtime":1621953570901,"results":"53","hashOfConfig":"31"},{"size":1658,"mtime":1621954064437,"results":"54","hashOfConfig":"31"},{"size":2601,"mtime":1621953760855,"results":"55","hashOfConfig":"31"},{"size":4244,"mtime":1621953344786,"results":"56","hashOfConfig":"31"},{"size":3604,"mtime":1621954101083,"results":"57","hashOfConfig":"31"},{"size":14080,"mtime":1621954440935,"results":"58","hashOfConfig":"31"},{"size":223,"mtime":1621952476766,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"39vgr",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mac/Desktop/hackathon/bsc-coupon/src/index.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/App.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/init.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/history.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/CreateCoupon.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Main.js",["128","129","130","131","132","133","134","135"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Card,\n  CardDeck,\n  Image,\n  Figure,\n  Container,\n  Row,\n  Col,\n  Nav,\n} from \"react-bootstrap\";\nimport { time } from \"../web3/time\";\nimport Loading from \"./Loading\";\nimport { initContractWithOutAccount } from \"../web3/init\";\n\nimport MusicBlock from \"./music/musicBlock\";\nimport MusicTable from \"./music/musicTable\";\nimport PlayListBlock from \"./music/playListBlock\";\nimport ImageBlock from \"./image/imageBlock\";\nimport VideoBlock from \"./video/videoBlock\";\nimport FlowBlock from \"./flow/flowBlock\";\n\nexport default function Main() {\n  const bnb = \"0x2B8fF854c5e16cF35B9A792390Cc3a2a60Ec9ba2\";\n  const [bodyTabKey, setTabKey] = useState(\"music\");\n  const [listCoupons, setCoupons] = useState([]);\n  const [allNft, setAllNft] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [noMetamask, setNoMetamask] = useState(false);\n\n  const createSubArray = (coupons) => {\n    let chunks = [];\n\n    while (coupons.length > 4) {\n      chunks.push(coupons.splice(0, 4));\n    }\n\n    if (coupons.length > 0) {\n      chunks.push(coupons);\n    }\n\n    console.log(\"[chunks] :\", chunks);\n\n    setCoupons(chunks);\n  };\n\n  const getCoupons = async () => {\n    if (window.couponFactory == null) {\n      await initContractWithOutAccount();\n      getCoupons();\n      return;\n    }\n    const allCoupons = [];\n    const allCouponsMap = {};\n    const couponCount = await window.couponFactory.methods\n      .totalCoupons()\n      .call();\n\n    if (Number(couponCount) === 0) {\n      setLoading(false);\n    }\n\n    for (let i = couponCount - 1; i >= 0; i--) {\n      const distCoupon = await window.couponFactory.methods\n        .allCoupons(i)\n        .call();\n\n      allCoupons.push(distCoupon);\n      if (\n        distCoupon.couponTokenName &&\n        distCoupon.couponTokenName.includes(\"|\")\n      ) {\n        distCoupon.type = distCoupon.couponTokenName.split(\"|\")[0];\n        distCoupon.name = distCoupon.couponTokenName.split(\"|\")[1];\n      }\n      allCouponsMap[distCoupon.couponAddress] = distCoupon;\n\n      if (i === 0) {\n        createSubArray(allCoupons);\n      }\n    }\n\n    console.log(\"allCoupons\", allCoupons);\n    console.log(\"allCouponsMap\", allCouponsMap);\n    console.log(\"couponCount\", couponCount);\n    setAllNft(allCouponsMap);\n    console.log(\"allNft:  =>\", allNft);\n    setLoading(false);\n  };\n\n  const isMetamaskInstalled = () => {\n    return typeof window.ethereum !== \"undefined\";\n  };\n\n  useEffect(() => {\n    if (!isMetamaskInstalled()) {\n      setLoading(false);\n      setNoMetamask(true);\n    } else if (Object.values(allNft || {}).length === 0) {\n      getCoupons();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function DisplayCard({ coupon, count }) {\n    return (\n      <Card key={count} className=\"display-coupon-card\">\n        {/* <Link\n          key={count}\n          style={{ textDecoration: \"none\" }}\n          to={`/view/${coupon.couponAddress}/${coupon.couponTokenSymbol}/${\n            coupon.ticketBuyToken === bnb ? \"BNB\" : \"USDC\"\n          }`}\n        > */}\n        <Card.Header style={{ marginBottom: \"5px\" }}>\n          <Image src={coupon.baseTokenURI} width=\"50px\"></Image>\n          <span> {coupon.couponTokenName} Coupon</span>\n        </Card.Header>\n\n        <Card.Body>\n          <div style={{ marginBottom: \"10px\" }}>\n            Price: {coupon.ticketPrice}\n            <span> {coupon.ticketBuyToken === bnb ? \"BNB\" : \"USDC\"}</span>\n          </div>\n        </Card.Body>\n        {/* </Link> */}\n      </Card>\n    );\n  }\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"mb-5 pb-5\">\n      {/* {!noMetamask ? (\n        listCoupons.map((element, key) =>\n          element.length === 4 ? (\n            <CardDeck key={key} style={{ margin: \"2%\" }}>\n              {element.map((coupon, k) => (\n                <DisplayCard key={k} coupon={coupon} count={k} />\n              ))}\n            </CardDeck>\n          ) : (\n            <CardDeck key={key} style={{ margin: \"2%\" }}>\n              {element.map((coupon, k) => (\n                <DisplayCard key={k} coupon={coupon} count={k} />\n              ))}\n\n              {[...Array(4 - element.length)].map((x, i) => (\n                <Card\n                  key={element.length + i + 1}\n                  className=\"hidden-card\"\n                ></Card>\n              ))}\n            </CardDeck>\n          )\n        )\n      ) : (\n        <div\n          className=\"alert-message\"\n          style={{ marginTop: \"20%\", fontSize: \"x-large\" }}\n        >\n          You don't have metamask. Please install first !!\n        </div>\n      )} */}\n      <Container className=\"mb-4\">\n        <Col>\n          <Row className=\"ml-2 mt-5 mb-2\">\n            <h2 className=\"font-weight-bold display-6\">Highlights NFT</h2>\n          </Row>\n          <Row>\n            {Object.keys(allNft || {}).map(function (key, i) {\n              if (i < 3) {\n                return (\n                  <Col xs>\n                    <FlowBlock\n                      imgSrc={allNft[key].baseTokenURI}\n                      title={allNft[key].type}\n                      subTitle={allNft[key].name}\n                      caption={allNft[key].couponTokenSymbol}\n                      href={allNft[key].dataURI || \"\"}\n                    />\n                  </Col>\n                );\n              }\n              return <></>;\n            })}\n          </Row>\n        </Col>\n      </Container>\n      <Container className=\"pt-0 mb-5\">\n        <Col className=\"p-0\">\n          <Row className=\"ml-4 mb-5 mt-5\">\n            <Nav\n              bg=\"dark\"\n              variant=\"dark\"\n              onSelect={(k) => setTabKey(k)}\n              defaultActiveKey={bodyTabKey}\n            >\n              <Nav.Item>\n                <Nav.Link\n                  className={`tab-title font-weight-bold display-6 ${\n                    bodyTabKey && bodyTabKey === \"music\" && \"tab-title-active\"\n                  }`}\n                  eventKey=\"music\"\n                >\n                  MUSIC\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link\n                  className={`tab-title font-weight-bold display-6 ${\n                    bodyTabKey && bodyTabKey === \"image\" && \"tab-title-active\"\n                  }`}\n                  eventKey=\"image\"\n                >\n                  IMAGE\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link\n                  className={`tab-title font-weight-bold display-6 ${\n                    bodyTabKey && bodyTabKey === \"video\" && \"tab-title-active\"\n                  }`}\n                  eventKey=\"video\"\n                >\n                  VIDEO\n                </Nav.Link>\n              </Nav.Item>\n            </Nav>\n          </Row>\n          {bodyTabKey && bodyTabKey === \"music\" && (\n            <>\n              <PlayListBlock allNft={allNft} />\n              <MusicTable allNft={allNft} />\n            </>\n          )}\n          {bodyTabKey && bodyTabKey === \"image\" && (\n            <>\n              <ImageBlock allNft={allNft} />\n            </>\n          )}\n          {bodyTabKey && bodyTabKey === \"video\" && (\n            <VideoBlock allNft={allNft} />\n          )}\n        </Col>\n      </Container>\n    </div>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Header.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/ViewCoupon.js",["136"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport history from \"./history\";\nimport Loading from \"./Loading\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport { precision } from \"../web3/precision\";\nimport { time } from \"../web3/time\";\nimport * as erc20Abi from \"../abis/erc20Abi.json\";\nimport * as distCouponAbi from \"../abis/distCoupon.json\";\nimport { Card, Row, Col, Image, Button, CardDeck } from \"react-bootstrap\";\nimport BuyTicket from \"./BuyTicket\";\nimport DisplayTickets from \"./DisplayTickets\";\nimport Claim from \"./Claim\";\n\nexport default function ViewPool() {\n  let routes;\n  const BNB = \"0x2B8fF854c5e16cF35B9A792390Cc3a2a60Ec9ba2\";\n  const USDC = \"0x65471bdCDb3720Dc07B914756884b50a2b4395fb\";\n  const { couponAddress, nftToken, buyToken } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n  let [erc20Instance, setErc20Instance] = useState();\n  let [contractInstance, setContractInstance] = useState();\n  const [state, setState] = useState({\n    totalTicket: 0,\n    ticketPrice: 0,\n    distInterval: 0,\n    distCount: 0,\n    couponStartTimestamp: 0,\n    ticketBuyEndTime: 0,\n    nextDistStartTime: 0,\n    nftBalance: 0,\n    tickets: [],\n    couponResult: 0,\n    tokenBaseURI: \"\",\n    isWinnerTicket: false,\n    couponWinnerAddr: \"\",\n    erc20Balance: 0,\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false,\n  });\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false,\n  });\n  const [showBuyTicket, setShowBuyTicket] = useState(false);\n  const [showMetamaskError, setShowMetamaskError] = useState(false);\n\n  const fetchContractData = async () => {\n    try {\n      if (!loading) setLoading(true);\n\n      let result;\n      if (!contractInstance) {\n        result = await createContractInstance();\n      }\n\n      contractInstance = contractInstance ? contractInstance : result.contract;\n      erc20Instance = erc20Instance ? erc20Instance : result.erc20;\n\n      if (contractInstance) {\n        setShowBuyTicket(false);\n\n        const totalTicket = await contractInstance.methods\n          .ticketNumber()\n          .call();\n\n        const ticketPrice = await contractInstance.methods.ticketPrice().call();\n\n        const distInterval = await contractInstance.methods\n          .distInterval()\n          .call();\n\n        const distCount = await contractInstance.methods.distCount().call();\n\n        const couponStartTimestamp = await contractInstance.methods\n          .couponStartTime()\n          .call();\n\n        const ticketBuyEndTime = await contractInstance.methods\n          .ticketBuyEndTime()\n          .call();\n\n        const nextDistStartTime = await contractInstance.methods\n          .getNextDistTimestamp()\n          .call();\n\n        const nftBalance = await contractInstance.methods\n          .balanceOf(window.userAddress)\n          .call();\n\n        const tokenBaseURI = await contractInstance.methods.baseURI().call();\n\n        let couponResult = 0,\n          couponWinnerAddr = \"\";\n        if (\n          Number(distCount) === Number(totalTicket) - 1 &&\n          time.currentUnixTime() > Number(ticketBuyEndTime)\n        ) {\n          couponResult = await contractInstance.methods.getFinalResult().call();\n\n          couponWinnerAddr = await contractInstance.methods\n            .getCouponWinner()\n            .call();\n        }\n\n        let tickets = [],\n          isWinnerTicket = false;\n        for (let i = 0; i < nftBalance; i++) {\n          const ticketNumber = await contractInstance.methods\n            .tokenOfOwnerByIndex(window.userAddress, i)\n            .call();\n\n          const isValid = await contractInstance.methods\n            .stillValidTicket(ticketNumber)\n            .call();\n\n          tickets.push({ ticketNumber, isValid });\n\n          if (Number(couponResult) === Number(ticketNumber)) {\n            isWinnerTicket = true;\n          }\n        }\n\n        let erc20Balance = await precision.remove(\n          await erc20Instance.methods.balanceOf(window.userAddress).call(),\n          await erc20Instance.methods.decimals().call()\n        );\n\n        console.log(\"fd\", window.userAddress + \"/\" + erc20Balance);\n\n        setState({\n          totalTicket,\n          ticketPrice,\n          distInterval,\n          distCount,\n          couponStartTimestamp,\n          ticketBuyEndTime,\n          nextDistStartTime,\n          nftBalance,\n          tickets,\n          couponResult,\n          tokenBaseURI,\n          isWinnerTicket,\n          couponWinnerAddr,\n          erc20Balance,\n        });\n\n        setLoading(false);\n      }\n    } catch (error) {\n      setErrorModal({\n        open: true,\n        msg: error.message,\n      });\n    }\n  };\n\n  const createContractInstance = () => {\n    return new Promise((resolve, reject) => {\n      try {\n        const contract = new window.web3.eth.Contract(\n          distCouponAbi.default,\n          couponAddress,\n          { from: window.userAddress }\n        );\n\n        const erc20 = new window.web3.eth.Contract(\n          erc20Abi.default,\n          buyToken === \"BNB\" ? BNB : USDC,\n          { from: window.userAddress }\n        );\n\n        console.log(\"dss\", erc20);\n\n        setErc20Instance(erc20);\n        setContractInstance(contract);\n        resolve({ contract, erc20 });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  const handleDist = () => {\n    contractInstance.methods\n      .dist(generateRandom())\n      .send()\n      .on(\"transactionHash\", () => {\n        setProcessing(true);\n      })\n      .on(\"receipt\", () => {\n        setProcessing(false);\n        fetchContractData();\n      })\n      .catch((error) => {\n        setProcessing(false);\n        setErrorModal({\n          open: true,\n          msg: error.message,\n        });\n      });\n  };\n\n  const generateRandom = () => {\n    return Math.floor(Math.random() * 10 ** 15);\n  };\n\n  const getTokenSymbol = () => {\n    return buyToken === \"BNB\" ? \"BNB\" : \"USDC\";\n  };\n\n  useEffect(() => {\n    if (\n      typeof window.ethereum === \"undefined\" ||\n      !window.ethereum.isConnected() ||\n      !window.ethereum.selectedAddress\n    ) {\n      setLoading(false);\n      setShowMetamaskError(true);\n    }\n\n    if (\n      typeof window.ethereum !== \"undefined\" &&\n      window.ethereum.selectedAddress &&\n      window.ethereum.isConnected()\n    ) {\n      fetchContractData();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (loading) {\n    routes = <Loading />;\n  } else {\n    routes = (\n      <div>\n        {showMetamaskError ? (\n          <AlertModal\n            open={showMetamaskError}\n            toggle={() => {\n              setShowMetamaskError(false);\n              history.push(\"/\");\n            }}\n          >\n            <div>\n              {typeof window.ethereum === \"undefined\" ? (\n                <div>You can't use these features without Metamask.</div>\n              ) : (\n                <div>Please connect to Metamask to use this feature !!</div>\n              )}\n            </div>\n          </AlertModal>\n        ) : (\n          <CardDeck>\n            <Card className=\"hidden-card\"></Card>\n\n            <Card className=\"mx-auto view-pool-card\">\n              <Card.Body style={{ textAlign: \"left\", fontWeight: \"bold\" }}>\n                <p className=\"view-pool-header\">\n                  <u>Distribution Coupon</u>\n                </p>\n\n                <Row style={{ paddingBottom: \"20px\" }}>\n                  <Col>\n                    <u>Total Tickets</u>\n                    <span> :</span>\n                    <span className=\"float-right\">{state.totalTicket}</span>\n                  </Col>\n\n                  <Col>\n                    <u>Ticket Price</u>\n                    <span> :</span>\n                    <span className=\"float-right\">\n                      <span>{state.ticketPrice} </span>\n                      {getTokenSymbol()}\n                    </span>\n                  </Col>\n                </Row>\n\n                <Row style={{ paddingBottom: \"20px\" }}>\n                  <Col>\n                    <u>Distribution Complete</u>\n                    <span> :</span>\n                    <span className=\"float-right\">{state.distCount}</span>\n                  </Col>\n\n                  <Col>\n                    <u>NFT Token</u>\n                    <span> :</span>\n                    <span className=\"float-right\">\n                      {state.tokenBaseURI !== \"\" ? (\n                        <a\n                          target=\"_blank\"\n                          href={state.tokenBaseURI}\n                          rel=\"noreferrer noopener\"\n                        >\n                          {nftToken}\n                        </a>\n                      ) : (\n                        <div>{nftToken}</div>\n                      )}\n                    </span>\n                  </Col>\n                </Row>\n\n                {Number(state.nextDistStartTime) > time.currentUnixTime() ? (\n                  <Row className=\"text-center\">\n                    <Col>\n                      <u>Next Distribution In</u>\n                      <span> : </span>\n                      <span>\n                        {time.getRemainingTime(state.nextDistStartTime)}\n                      </span>\n                    </Col>\n                  </Row>\n                ) : Number(state.distCount) === Number(state.totalTicket) - 1 &&\n                  Number(state.distCount) > 0 ? (\n                  <div>\n                    <div className=\"auction-alert-message\">\n                      Token Already Closed\n                    </div>\n                    <div className=\"auction-info-message\">\n                      Result: {state.tokenResult}\n                    </div>\n                  </div>\n                ) : null}\n\n                {time.currentUnixTime() > Number(state.nextDistStartTime) &&\n                Number(state.distCount) < Number(state.totalTicket) - 1 ? (\n                  <Row className=\"text-center\">\n                    <Col>\n                      <Button variant=\"info\" onClick={handleDist}>\n                        {processing ? (\n                          <div className=\"d-flex align-items-center\">\n                            Processing\n                            <span className=\"loading ml-2\"></span>\n                          </div>\n                        ) : (\n                          <div>Execute Distribution</div>\n                        )}\n                      </Button>\n\n                      <div className=\"info-message\">\n                        You will get {Number(state.ticketPrice) / 100}{\" \"}\n                        {getTokenSymbol()}\n                        <span> for executing this distribution.</span>\n                      </div>\n                    </Col>\n                  </Row>\n                ) : null}\n\n                {state.nftBalance > 0 ? (\n                  <DisplayTickets\n                    nftBalance={state.nftBalance}\n                    tickets={state.tickets}\n                  />\n                ) : null}\n\n                {showBuyTicket ? (\n                  <BuyTicket\n                    couponAddress={couponAddress}\n                    contractInstance={contractInstance}\n                    erc20Instance={erc20Instance}\n                    buyToken={buyToken === \"BNB\" ? \"BNB\" : \"USDC\"}\n                    availableBalance={state.erc20Balance}\n                    balanceNeeded={state.ticketPrice}\n                    callback={fetchContractData}\n                  />\n                ) : null}\n\n                {Number(state.isWinnerTicket) !== 0 ? (\n                  <Claim\n                    couponAddress={couponAddress}\n                    contractInstance={contractInstance}\n                    ticketNumber={state.couponResult}\n                    callback={fetchContractData}\n                  />\n                ) : Number(state.distCount) === Number(state.totalTicket) - 1 &&\n                  Number(state.distCount) > 0 &&\n                  Number(state.nftBalance) > 0 ? (\n                  state.couponWinnerAddr === window.userAddress ? (\n                    <div className=\"info-message\">\n                      You have already claimed your coupon for ticket number{\" \"}\n                      {state.couponResult}\n                    </div>\n                  ) : null\n                ) : Number(state.nftBalance) > 0 &&\n                  Number(state.distCount) > 0 &&\n                  Number(state.distCount) === Number(state.totalTicket) - 1 ? (\n                  <div className=\"info-message\">\n                    You don't have winner ticket.\n                  </div>\n                ) : null}\n              </Card.Body>\n\n              {time.currentUnixTime() < Number(state.ticketBuyEndTime) ? (\n                <Card.Footer className=\"view-pool-footer\">\n                  <Button\n                    onClick={() => setShowBuyTicket(true)}\n                    variant=\"success\"\n                  >\n                    {state.nftBalance > 0 ? (\n                      <div>Buy More Ticket</div>\n                    ) : (\n                      <div>Want to Buy Ticket ?</div>\n                    )}\n                  </Button>\n                </Card.Footer>\n              ) : Number(state.nftBalance) === 0 ? (\n                <div className=\"alert-message\">Participation time over.</div>\n              ) : (\n                <div style={{ marginBottom: \"20px\" }}></div>\n              )}\n            </Card>\n\n            <Card className=\"hidden-card\"></Card>\n          </CardDeck>\n        )}\n\n        <AlertModal\n          open={errorModal.open}\n          toggle={() =>\n            setErrorModal({\n              ...errorModal,\n              open: false,\n            })\n          }\n        >\n          {errorModal.msg}\n        </AlertModal>\n\n        <SuccessModal\n          open={successModal.open}\n          toggle={() =>\n            setSuccessModal({\n              ...successModal,\n              open: false,\n            })\n          }\n        >\n          {successModal.msg}\n        </SuccessModal>\n      </div>\n    );\n  }\n\n  return routes;\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Faucet.js",["137"],"import React, { useEffect, useState } from \"react\";\nimport Loading from \"./Loading\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport { Button, Card, CardDeck } from \"react-bootstrap\";\n\nexport default function Faucet() {\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false\n  });\n  const [tokens] = useState([\n    {\n      name: \"BNB\",\n      address: \"0x2B8fF854c5e16cF35B9A792390Cc3a2a60Ec9ba2\",\n      status: false\n    }, {\n      name: \"USDC\",\n      address: \"0x65471bdCDb3720Dc07B914756884b50a2b4395fb\",\n      status: false\n    }\n  ]);\n\n  const handleGetTestTokens = (tokenAddress) => {\n    window.tokenFaucet.methods\n      .claimTestTokens(tokenAddress)\n      .send()\n      .on('transactionHash', () => {\n        setProcessing(true);\n      })\n      .on('receipt', (_) => {\n        setProcessing(false);\n      })\n      .catch((error) => {\n        setProcessing(false);\n        setErrorModal({\n          open: true,\n          msg: error.message,\n        });\n      });\n  }\n\n  const checkIsAlreadyClaimed = () => {\n    tokens.forEach(async (token, i) => {\n      console.log('ff', token.address)\n      const status = await window.tokenFaucet\n        .methods.alreadyClaimed(\n          window.userAddress,\n          token.address,\n        ).call();\n\n      tokens[i].status = status;\n\n      if (i === tokens.length - 1) {\n        setLoading(false);\n      }\n    });\n  }\n\n  useEffect(() => {\n    checkIsAlreadyClaimed();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\nif (loading) {\n  return <Loading />\n};\n\nreturn (\n  <div>\n    <CardDeck>\n      <Card className=\"hidden-card\"></Card>\n        <Card className=\"view-pool-card\">\n          <Card.Header>\n            <u>Token Faucet</u>\n          </Card.Header>\n\n          <Card.Body>\n            <div style={{ marginBottom: \"30px\" }}>\n              <strong>If you want to get token</strong>\n                <br />Please use <a\n                    target=\"_blank\"                    \n                    href=\"https://testnet.binance.org/faucet-smart\"\n                    style={{ fontWeight: \"bold\" }}\n                > Faucet </a>                \n            </div>\n\n            {tokens.map((token, key) => (\n              <Card\n                key={key}\n                className=\"mx-auto form-card text-center\"\n                style={{\n                    backgroundColor: \"rgb(253, 255, 255)\",\n                    marginTop: \"4%\",\n                    marginBottom: \"4%\"\n                }}>\n                <Card.Header>\n                  <u>{token.name} Faucet</u>\n                </Card.Header>\n\n                {!token.status ?\n                  <Card.Body>\n                    <p>\n                      You can get Test <strong>{token.name} </strong>\n                    </p>\n                    <Button\n                      style={{ marginTop: '10px' }}\n                      variant=\"success\"\n                      onClick={() =>\n                        handleGetTestTokens(token.address)\n                      }\n                    >\n                    {processing ?\n                      <div className=\"d-flex align-items-center\">\n                        Processing\n                        <span className=\"loading ml-2\"></span>\n                      </div>\n                        :\n                      <div>\n                        GET 100 {token.name}\n                      </div>\n                    }\n                    </Button>\n                  </Card.Body>\n                  :\n                  <Card.Body>\n                    <p style={{ color: \"gray\" }}>\n                      You have already claimed your 100 {token.name}.\n                    </p>                    \n                  </Card.Body>\n                  }\n                </Card>\n              ))}\n            </Card.Body>\n          </Card>\n\n          <Card className=\"hidden-card\"></Card>\n        </CardDeck>\n\n\n        <AlertModal\n          open={errorModal.open}\n          toggle={() => setErrorModal({\n            ...errorModal, open: false\n          })}\n        >\n          {errorModal.msg}\n        </AlertModal>\n\n        <SuccessModal\n          open={successModal.open}\n          toggle={() => setSuccessModal({\n            ...successModal, open: false\n          })}\n        >\n          {successModal.msg}\n        </SuccessModal>\n      </div >\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/config.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/AlertModal.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/SuccessModal.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Loading.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/DisplayTickets.js",["138"],"import React from \"react\";\n\nimport { Row, Col, Card, Image } from \"react-bootstrap\";\n\nexport default function DisplayTickets({\n    nftBalance,\n    tickets,\n}) {\n    return (\n        <Card\n            className=\"mx-auto form-card text-center\"\n            style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n        >\n            <Card.Header>\n                <u>Your Tickets</u>\n            </Card.Header>\n\n            <Card.Body>\n                <div style={{ marginBottom: \"20px\", color: \"green\", fontSize: \"large\" }}>\n                    You have {nftBalance} Tickets\n                </div>\n\n                {tickets.map((ticket, key) => (\n                    <Row key={key} className=\"text-center\" style={{ paddingBottom: \"20px\" }}>\n                        <Col>\n                            <u>Ticket Number</u>\n                            <span> : </span>\n                            <span>{ticket.ticketNumber}</span>\n                        </Col>\n                        <Col>\n                            <u>Still Valid</u>\n                            <span> : </span>\n                            {ticket.isValid ?\n                                    'yes' :\n                                    'no'}\n                        </Col>\n                    </Row>\n                ))}\n            </Card.Body>\n        </Card>\n    );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/BuyTicket.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Claim.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/time.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/precision.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/api/getBnbUsdt.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/musicBlock.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/image/imageBlock.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/video/videoBlock.js",["139"],"import { Col, Image, Row } from \"react-bootstrap\";\n\nimport FlowBlock from \"../flow/flowBlock\";\n\nexport default function VideoBlock({ allNft }) {\n  // const imgSrc = \"/cover.jpeg\";\n\n  return (\n    <Col className=\"\">\n      <Row>\n        {Object.keys(allNft || {}).map(function (key, i) {\n          if (allNft[key].type === \"video\") {\n            return (\n              <Col key={key} xs={4} className=\"mb-4 fadein\">\n                <FlowBlock\n                  imgSrc={allNft[key].baseTokenURI}\n                  title={allNft[key].type}\n                  subTitle={allNft[key].name}\n                  caption={allNft[key].couponTokenSymbol}\n                  href={allNft[key].dataURI || \"\"}\n                />\n              </Col>\n            );\n          }\n          return <></>;\n        })}\n      </Row>\n    </Col>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/flow/flowBlock.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/playListBlock.js",["140","141"],"import { Col, Image, Row, Button } from \"react-bootstrap\";\n\nexport default function PlayListBlock({ allNft }) {\n  const imgSrc = \"/cover.jpeg\";\n\n  return (\n    <div className=\"\">\n      {Object.keys(allNft || {}).map(function (key, i) {\n        if (allNft[key].type === \"playlist\")\n          return (\n            <Row key={key} xs={12} className=\"m-0 mb-5 align-items-center\">\n              <Col xs={2} className=\"\">\n                <Image\n                  className=\"fadein\"\n                  src={allNft[key].baseTokenURI}\n                  rounded\n                  fluid\n                />\n              </Col>\n              <Col xs={8} className=\"text-left\">\n                <p className=\"mt-2 mb-0\">Playlist</p>\n                <p className=\"display-4 font-weight-bold mb-0\">\n                  {allNft[key].name}\n                </p>\n                <p className=\"display-6 mb-1\">\n                  {allNft[key].couponTokenSymbol}\n                </p>\n\n                <p className=\"caption\">\n                  {Math.floor(Math.random() * 99) + 1} Songs,{\" \"}\n                  {Math.floor(Math.random() * 9) + 1} hr{\" \"}\n                  {Math.floor(Math.random() * 50) + 1} min\n                </p>\n              </Col>\n              <Col xs={2} className=\"text-right\">\n                <a\n                  href={allNft[key].baseTokenURI || allNft[key].dataURI}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  className=\"playlist-btn music-btn\"\n                >\n                  Play\n                </a>\n              </Col>\n            </Row>\n          );\n        return <></>;\n      })}\n    </div>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/musicTable.js",["142","143","144"],"import { Col, Image, Row, Table, Button } from \"react-bootstrap\";\n\nexport default function MusicTable({ allNft }) {\n  var i = 1;\n  return (\n    <>\n      <Table\n        className=\"music-table ml-2 mr-2\"\n        borderless={true}\n        bordered={false}\n        striped={false}\n        variant=\"dark\"\n      >\n        <thead>\n          <tr>\n            <th className=\"number-col caption\">#</th>\n            <th className=\"caption\"></th>\n            <th className=\"caption\">TITLE</th>\n            <th className=\"caption\">ARTIST</th>\n            <th className=\"caption\">ALBUM</th>\n            <th className=\"caption time-col\">TIME</th>\n            {/* <th className=\"caption time-col\">PRICE</th> */}\n            <th className=\"caption\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(allNft || {}).map(function (key, _) {\n            if (allNft[key].type === \"music\")\n              return (\n                <tr key={key}>\n                  <td className=\"number-col caption\">{i++}</td>\n                  <td className=\"logo-col\">\n                    <Image\n                      className=\"music-icon mr-2 fadein\"\n                      src={allNft[key].baseTokenURI}\n                      rounded\n                      fluid\n                    />\n                  </td>\n                  <td>{allNft[key].name}</td>\n                  <td>v.a</td>\n                  <td className=\"caption\">{allNft[key].couponTokenSymbol}</td>\n                  <td className=\"caption time-col\">\n                    {Math.floor(Math.random() * 4) + 1}:\n                    {Math.floor(Math.random() * 60) + 1}\n                  </td>\n                  {/* <td className=\"caption time-col\">\n                    {allNft[key].ticketPrice} {allNft[key].description}\n                  </td> */}\n                  {/* <Button className=\"normal-btn\">Play</Button> */}\n                  <td className=\"text-center\">\n                    <a\n                      href={allNft[key].dataURI}\n                      target=\"_blank\"\n                      rel=\"noreferrer\"\n                      role=\"button\"\n                      className=\"play-block-btn pt-2\"\n                      type=\"button\"\n                      aria-pressed=\"false\"\n                      aria-label=\"play\"\n                    >\n                      <span className=\"ml-1\">&#x25b6;</span>\n\n                      {/* <span className=\"ml-1\">&#43;</span> */}\n                    </a>\n                  </td>\n                </tr>\n              );\n            return <></>;\n          })}\n        </tbody>\n      </Table>\n    </>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/market/marketPage.js",["145"],"import React, { useEffect, useState } from \"react\";\nimport { Col, Image, Row, Container, Button } from \"react-bootstrap\";\nimport { initContractWithOutAccount } from \"../../web3/init\";\nimport Loading from \"../Loading\";\n\nimport \"./marketPage.css\";\n\nexport default function MarketPage() {\n  const imgSrc = \"/cover.jpeg\";\n  const [allNft, setAllNft] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  const getCoupons = async () => {\n    if (window.couponFactory == null) {\n      await initContractWithOutAccount();\n      getCoupons();\n      return;\n    }\n    const allCoupons = [];\n    const allCouponsMap = {};\n    const couponCount = await window.couponFactory.methods\n      .totalCoupons()\n      .call();\n\n    if (Number(couponCount) === 0) {\n      setLoading(false);\n    }\n\n    for (let i = couponCount - 1; i >= 0; i--) {\n      const distCoupon = await window.couponFactory.methods\n        .allCoupons(i)\n        .call();\n\n      allCoupons.push(distCoupon);\n      if (\n        distCoupon.couponTokenName &&\n        distCoupon.couponTokenName.includes(\"|\")\n      ) {\n        distCoupon.type = distCoupon.couponTokenName.split(\"|\")[0];\n        distCoupon.name = distCoupon.couponTokenName.split(\"|\")[1];\n      }\n      allCouponsMap[distCoupon.couponAddress] = distCoupon;\n    }\n\n    setAllNft(allCouponsMap);\n    setLoading(false);\n  };\n\n  const isMetamaskInstalled = () => {\n    return typeof window.ethereum !== \"undefined\";\n  };\n\n  useEffect(() => {\n    if (!isMetamaskInstalled()) {\n      setLoading(false);\n    } else if (Object.values(allNft || {}).length === 0) {\n      getCoupons();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"market-container fadein\">\n      <div className=\"market-bg-image\"></div>\n      {/* <Image className=\"market-bg\" src=\"/market-bg.jpeg\" fluid></Image> */}\n      <Container className=\"market-bg-text \">\n        <Row className=\"justify-content-center mb-4 pb-2\">\n          <h1 className=\"market-heading\">CREATE & TRADE YOUR MUSIC NFT'S</h1>\n        </Row>\n        <Row className=\"mb-4 pb-2\">\n          <Col className=\"text-right\">\n            <Button className=\"text-center music-btn\">ISSUE NEW NFT</Button>\n          </Col>\n          <Col className=\"text-left\">\n            <Button className=\"text-center normal-btn\">\n              TUTORIAL MINT NFT\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n      <div className=\"pb-5\"></div>\n      <div className=\"ml-5 mr-5 pl-5 pr-5\">\n        {Object.keys(allNft || {}).map(function (key, i) {\n          return (\n            <Container className=\" mt-5 nft-card pt-4 pb-4\">\n              <div className=\"\">\n                <Row xs={12} className=\"m-0 align-items-center\">\n                  <Col xs={2} className=\"\">\n                    <Image\n                      className=\"fadein\"\n                      src={allNft[key].baseTokenURI}\n                      rounded\n                      fluid\n                    />\n                  </Col>\n                  <Col xs={8} className=\"text-left\">\n                    <p className=\"display-6\">{allNft[key].name}</p>\n                    <p className=\"gray-text mt-2\">{allNft[key].name}</p>\n                    <p className=\"gray-text caption\">\n                      {allNft[key].couponTokenSymbol}\n                    </p>\n                  </Col>\n                  <Col xs={2} className=\"text-right\">\n                    <Button style={{ width: 200 }} className=\"music-btn\">\n                      {/* BUY THIS NFT */}\n                      {allNft[key].ticketPrice} {allNft[key].description}\n                    </Button>\n                    {\n                      <div className=\"pb-3\"></div>\n                      /* <Button style={{ width: 200 }} className=\"normal-btn\">\n                      {allNft[key].ticketPrice} {allNft[key].description}\n                    </Button> */\n                    }\n                    <div className=\"pb-2\"></div>\n                  </Col>\n                </Row>\n              </div>\n            </Container>\n          );\n        })}\n      </div>\n      <div className=\"pb-5\"></div>\n      <div className=\"pb-5\"></div>\n    </div>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/account/accountPage.js",["146"],"import { Col, Image, Row, Container, Button, Nav } from \"react-bootstrap\";\nimport React, { useEffect, useState } from \"react\";\n\nimport ImageBlock from \"../image/imageBlock\";\nimport MusicTable from \"../music/musicTable\";\nimport VideoBlock from \"../video/videoBlock\";\nimport CreateNft from \"../CreateNft\";\n\nimport \"./accountPage.css\";\n\nexport default function AccountPage() {\n  var profileImg = \"/profile.svg\";\n  const [bodyTabKey, setTabKey] = useState(\"mintNFT\");\n\n  return (\n    <>\n      <Container className=\"w-75  \">\n        <div className=\"mt-5 pt-5 fadein\"></div>\n        <Row className=\"justify-content-center mb-4\">\n          <Image className=\"ml-4\" roundedCircle fluid src={profileImg}></Image>\n          <Col className=\"text-left pt-2\">\n            <p className=\"display-6 mb-1 font-weight-bold\">Anonymous</p>\n            <p>{window.userAddress}</p>\n          </Col>\n          <Button className=\"align-self-center text-center normal-btn\">\n            EDIT\n          </Button>\n        </Row>\n\n        <Nav\n          bg=\"dark\"\n          variant=\"dark\"\n          onSelect={(k) => setTabKey(k)}\n          defaultActiveKey={bodyTabKey}\n        >\n          {/* <Nav.Item>\n            <Nav.Link\n              className={`tab-title font-weight-bold display-6 ${\n                bodyTabKey && bodyTabKey === \"myNFT\" && \"tab-title-active\"\n              }`}\n              eventKey=\"myNFT\"\n            >\n              MY NFTS\n            </Nav.Link>\n          </Nav.Item> */}\n          <Nav.Item>\n            <Nav.Link\n              className={`tab-title font-weight-bold display-6 ${\n                bodyTabKey && bodyTabKey === \"mintNFT\" && \"tab-title-active\"\n              }`}\n              eventKey=\"mintNFT\"\n            >\n              MINT NFTS\n            </Nav.Link>\n          </Nav.Item>\n          {/* <Nav.Item>\n            <Nav.Link\n              className={`tab-title font-weight-bold display-6 ${\n                bodyTabKey &&\n                bodyTabKey === \"configAccount\" &&\n                \"tab-title-active\"\n              }`}\n              eventKey=\"configAccount\"\n            >\n              CONFIG\n            </Nav.Link>\n          </Nav.Item> */}\n        </Nav>\n\n        {bodyTabKey && bodyTabKey === \"myNFT\" && (\n          <div className=\"fadein\">\n            <Container className=\"mt-4\">\n              <Col>\n                <Row className=\"\">\n                  <h2 className=\"font-weight-bold display-6\">Music</h2>\n                </Row>\n              </Col>\n            </Container>\n            <MusicTable />\n            <div className=\"dropdown-divider m-5\"></div>\n            <Container className=\"mb-3\">\n              <Col>\n                <Row className=\"\">\n                  <h2 className=\"font-weight-bold display-6\">Image</h2>\n                </Row>\n              </Col>\n            </Container>\n            <ImageBlock />\n            <div className=\"dropdown-divider m-5\"></div>\n            <Container className=\"mb-3\">\n              <Col>\n                <Row className=\"\">\n                  <h2 className=\"font-weight-bold display-6\">Video</h2>\n                </Row>\n              </Col>\n            </Container>\n            <VideoBlock />\n          </div>\n        )}\n        {bodyTabKey && bodyTabKey === \"mintNFT\" && (\n          <>\n            <div className=\"fadein mb-5 pb-5\">\n              <CreateNft />\n            </div>\n          </>\n        )}\n        {bodyTabKey && bodyTabKey === \"configAccount\" && (\n          <div className=\"fadein\">\n            <p className=\"mt-5 pt-5 display-2\">COMING SOON</p>\n          </div>\n        )}\n      </Container>\n    </>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/CreateNft.js",["147"],"import React, { useEffect, useState } from \"react\";\nimport ipfsClient from \"ipfs-http-client\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport history from \"./history\";\nimport {\n  Row,\n  Col,\n  Form,\n  Card,\n  Image,\n  Button,\n  CardDeck,\n  Dropdown,\n  DropdownButton,\n} from \"react-bootstrap\";\n\nexport default function CreateNft() {\n  const [deploying, setDeploying] = useState(false);\n  const [processing, setProcessing] = useState(false);\n  const [addCouponState, setAddCouponState] = useState({\n    couponTokenName: \"\",\n    couponType: \"music\",\n    couponDescription: \"\",\n    couponTokenSymbol: \"BNB\",\n    ticketPrice: \"\",\n    distInterval: \"\",\n    ticketBuyDuration: \"\",\n    ticketBuyToken: \"0x2B8fF854c5e16cF35B9A792390Cc3a2a60Ec9ba2\",\n    image: null,\n    data: null,\n  });\n\n  const [showMetamaskError, setShowMetamaskError] = useState(false);\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false,\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false,\n  });\n  const [tokens] = useState([\n    { name: \"BNB\", address: \"0x2B8fF854c5e16cF35B9A792390Cc3a2a60Ec9ba2\" },\n    { name: \"USDC\", address: \"0x65471bdCDb3720Dc07B914756884b50a2b4395fb\" },\n  ]);\n\n  const [nftType] = useState([\n    { name: \"Music\", value: \"music\" },\n    { name: \"Image\", value: \"image\" },\n    { name: \"Video\", value: \"video\" },\n    { name: \"Playlist\", value: \"playlist\" },\n  ]);\n\n  const ipfs = ipfsClient({\n    host: \"ipfs.infura.io\",\n    port: 5001,\n    protocol: \"https\",\n  });\n\n  const handleCreateCoupon = async () => {\n    let tokenBaseUrl = \"\";\n    let dataBaseUrl = \"\";\n\n    if (addCouponState.image) {\n      setDeploying(true);\n      const ipfsHash = await deployImage();\n      tokenBaseUrl = `https://ipfs.io/ipfs/${ipfsHash}`;\n      setDeploying(false);\n    }\n\n    if (addCouponState.data) {\n      setDeploying(true);\n      const ipfsHash = await deployDataFile();\n      dataBaseUrl = `https://ipfs.io/ipfs/${ipfsHash}`;\n      setDeploying(false);\n    }\n\n    if (addCouponState.image === null) {\n      setErrorModal({\n        open: true,\n        msg: \"Please upload Thumbnail Image\",\n      });\n      return;\n    }\n\n    if (\n      addCouponState.data === null &&\n      (addCouponState.couponType === \"music\" ||\n        addCouponState.couponType === \"video\")\n    ) {\n      setErrorModal({\n        open: true,\n        msg: \"Please upload Data File when choose music or video NFT type\",\n      });\n      return;\n    }\n\n    console.log(addCouponState);\n\n    window.couponFactory.methods\n      .addCoupon(\n        `${addCouponState.couponType}|${addCouponState.couponTokenName}`,\n        addCouponState.couponDescription,\n        addCouponState.couponTokenSymbol,\n        addCouponState.ticketBuyToken,\n        addCouponState.ticketPrice,\n        // addCouponState.distInterval,\n        // addCouponState.ticketBuyDuration,\n        tokenBaseUrl,\n        dataBaseUrl\n      )\n      .send()\n      .on(\"transactionHash\", () => {\n        setProcessing(true);\n      })\n      .on(\"receipt\", (_) => {\n        console.log(\"receipt: \", _);\n        setProcessing(false);\n        setSuccessModal({\n          open: true,\n          msg: \"Nft successfully created !!\",\n        });\n      })\n      .catch((error) => {\n        setProcessing(false);\n        setErrorModal({\n          open: true,\n          msg: error.message,\n        });\n        console.log(error.message);\n      });\n  };\n\n  const deployImage = () => {\n    return new Promise((resolve) => {\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(addCouponState.image);\n\n      reader.onloadend = async () => {\n        const files = [\n          {\n            path: addCouponState.image.name,\n            content: reader.result,\n          },\n        ];\n\n        for await (const result of ipfs.addAll(files)) {\n          resolve(result.cid.string);\n        }\n      };\n    });\n  };\n\n  const deployDataFile = () => {\n    return new Promise((resolve) => {\n      const reader = new window.FileReader();\n      reader.readAsArrayBuffer(addCouponState.data);\n\n      reader.onloadend = async () => {\n        const files = [\n          {\n            path: addCouponState.data.name,\n            content: reader.result,\n          },\n        ];\n\n        for await (const result of ipfs.addAll(files)) {\n          resolve(result.cid.string);\n        }\n      };\n    });\n  };\n  function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  useEffect(() => {\n    sleep(1000).then((_) => {\n      if (\n        typeof window.ethereum === \"undefined\" ||\n        !window.ethereum.selectedAddress\n      ) {\n        setShowMetamaskError(true);\n      }\n    });\n  }, []);\n\n  return (\n    <div style={{ marginTop: \"5%\" }}>\n      {showMetamaskError ? (\n        <AlertModal\n          open={showMetamaskError}\n          toggle={() => {\n            setShowMetamaskError(false);\n            history.push(\"/\");\n          }}\n        >\n          <div>\n            {typeof window.ethereum === \"undefined\" ? (\n              <div>You should install Metamask first.</div>\n            ) : (\n              <div>Please connect to Metamask.</div>\n            )}\n          </div>\n        </AlertModal>\n      ) : (\n        <CardDeck>\n          {/* <Card className=\"hidden-card\"></Card> */}\n\n          <Card className=\"w-50 text-left mx-auto create-card\">\n            <Card.Body>\n              <Row style={{ marginTop: \"10px\" }}>\n                <Col className=\"text-header\">Name:</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <Form.Control\n                    className=\"mb-4\"\n                    type=\"text\"\n                    placeholder=\"NFT Name\"\n                    onChange={(e) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        couponTokenName: e.target.value,\n                      })\n                    }\n                    style={{ width: \"80%\" }}\n                    value={addCouponState.couponTokenName}\n                    required\n                  />\n                </Col>\n              </Row>\n\n              <Row style={{ marginTop: \"10px\" }}>\n                <Col className=\"text-header\">Description:</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <Form.Control\n                    className=\"mb-4\"\n                    type=\"text\"\n                    placeholder=\"NFT Description\"\n                    onChange={(e) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        couponDescription: e.target.value,\n                      })\n                    }\n                    style={{ width: \"80%\" }}\n                    value={addCouponState.couponDescription}\n                    required\n                  />\n                </Col>\n              </Row>\n\n              {/* <Row>\n                <Col className=\"text-header\">Coupon Token Symbol:</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <Form.Control\n                    className=\"mb-4\"\n                    type=\"text\"\n                    placeholder=\"NFT Token Symbol\"\n                    onChange={(e) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        couponTokenSymbol: e.target.value,\n                      })\n                    }\n                    style={{ width: \"80%\" }}\n                    value={addCouponState.couponTokenSymbol}\n                    required\n                  />\n                </Col>\n              </Row> */}\n\n              <Row>\n                <Col className=\"text-header\">Price (BNB):</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <Form.Control\n                    className=\"mb-4\"\n                    type=\"number\"\n                    step=\"0\"\n                    placeholder=\"Price of the NFT\"\n                    onChange={(e) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        ticketPrice: e.target.value,\n                      })\n                    }\n                    style={{ width: \"80%\" }}\n                    value={addCouponState.ticketPrice}\n                    required\n                  />\n                </Col>\n              </Row>\n\n              {/* <Row style={{ marginBottom: \"30px\" }}>\n                <Col className=\"text-header\">Token For Buy:</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <DropdownButton\n                    style={{\n                      position: \"absolute\",\n                    }}\n                    title={tokens.map((element) =>\n                      addCouponState.ticketBuyToken === element.address\n                        ? element.name\n                        : null\n                    )}\n                    variant=\"outline-info\"\n                    onSelect={(event) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        ticketBuyToken: event,\n                      })\n                    }\n                  >\n                    {tokens.map((element, key) => (\n                      <Dropdown.Item key={key} eventKey={element.address}>\n                        {element.name}\n                      </Dropdown.Item>\n                    ))}\n                  </DropdownButton>\n                </Col>\n              </Row> */}\n\n              <Row style={{ marginBottom: \"30px\" }}>\n                <Col className=\"text-header\">Type:</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <DropdownButton\n                    style={{\n                      position: \"absolute\",\n                    }}\n                    title={nftType.map((element) =>\n                      addCouponState.couponType === element.value\n                        ? element.name\n                        : null\n                    )}\n                    variant=\"outline-info\"\n                    onSelect={(event) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        couponType: event,\n                      })\n                    }\n                  >\n                    {nftType.map((element, key) => (\n                      <Dropdown.Item key={key} eventKey={element.value}>\n                        {element.name}\n                      </Dropdown.Item>\n                    ))}\n                  </DropdownButton>\n                </Col>\n              </Row>\n\n              <Row>\n                <Col className=\"text-header\">Thumbnail Image:</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <Form.Control\n                    className=\"mb-4\"\n                    type=\"file\"\n                    onChange={(event) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        image: event.target.files[0],\n                      })\n                    }\n                    style={{ width: \"80%\" }}\n                    required\n                  />\n                </Col>\n              </Row>\n\n              <Row>\n                <Col className=\"\"></Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  {addCouponState.image ? (\n                    <Row>\n                      <Col>\n                        <Image\n                          src={URL.createObjectURL(addCouponState.image)}\n                          width=\"150\"\n                          height=\"150\"\n                        ></Image>\n                      </Col>\n                    </Row>\n                  ) : null}\n                </Col>\n              </Row>\n\n              {addCouponState.couponType !== \"image\" &&\n                addCouponState.couponType !== \"playlist\" && (\n                  <>\n                    <Row className={addCouponState.image && \"mt-4\"}>\n                      <Col className=\"text-header\">\n                        Data file (Music/Image/Video):\n                      </Col>\n                      <Col style={{ paddingLeft: \"0px\" }}>\n                        <Form.Control\n                          className=\"mb-4\"\n                          type=\"file\"\n                          onChange={(event) =>\n                            setAddCouponState({\n                              ...addCouponState,\n                              data: event.target.files[0],\n                            })\n                          }\n                          style={{ width: \"80%\" }}\n                          required\n                        />\n                      </Col>\n                    </Row>\n                  </>\n                )}\n            </Card.Body>\n\n            <Card.Footer className=\"text-center\">\n              <Button onClick={handleCreateCoupon} variant=\"outline-success\">\n                {deploying ? (\n                  <div className=\"d-flex align-items-center\">\n                    <span>Deploying to IPFS</span>\n\n                    <span className=\"loading ml-2\"></span>\n                  </div>\n                ) : processing ? (\n                  <div className=\"d-flex align-items-center\">\n                    Processing\n                    <span className=\"loading ml-2\"></span>\n                  </div>\n                ) : (\n                  <div>Submit</div>\n                )}\n              </Button>\n            </Card.Footer>\n          </Card>\n\n          {/* <Card className=\"hidden-card\"></Card> */}\n        </CardDeck>\n      )}\n\n      <AlertModal\n        open={errorModal.open}\n        toggle={() =>\n          setErrorModal({\n            ...errorModal,\n            open: false,\n          })\n        }\n      >\n        {errorModal.msg}\n      </AlertModal>\n\n      <SuccessModal\n        open={successModal.open}\n        toggle={() =>\n          setSuccessModal({\n            ...successModal,\n            open: false,\n          })\n        }\n        onConfirm={() => history.push(\"/\")}\n      >\n        {successModal.msg}\n      </SuccessModal>\n    </div>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/nft/nftPage.js",[],{"ruleId":"148","severity":1,"message":"149","line":2,"column":10,"nodeType":"150","messageId":"151","endLine":2,"endColumn":14},{"ruleId":"148","severity":1,"message":"152","line":5,"column":3,"nodeType":"150","messageId":"151","endLine":5,"endColumn":11},{"ruleId":"148","severity":1,"message":"153","line":7,"column":3,"nodeType":"150","messageId":"151","endLine":7,"endColumn":9},{"ruleId":"148","severity":1,"message":"154","line":13,"column":10,"nodeType":"150","messageId":"151","endLine":13,"endColumn":14},{"ruleId":"148","severity":1,"message":"155","line":17,"column":8,"nodeType":"150","messageId":"151","endLine":17,"endColumn":18},{"ruleId":"148","severity":1,"message":"156","line":27,"column":10,"nodeType":"150","messageId":"151","endLine":27,"endColumn":21},{"ruleId":"148","severity":1,"message":"157","line":30,"column":10,"nodeType":"150","messageId":"151","endLine":30,"endColumn":20},{"ruleId":"148","severity":1,"message":"158","line":106,"column":12,"nodeType":"150","messageId":"151","endLine":106,"endColumn":23},{"ruleId":"148","severity":1,"message":"159","line":11,"column":26,"nodeType":"150","messageId":"151","endLine":11,"endColumn":31},{"ruleId":"160","severity":1,"message":"161","line":88,"column":34,"nodeType":"162","messageId":"163","endLine":92,"endColumn":18,"fix":"164"},{"ruleId":"148","severity":1,"message":"159","line":3,"column":26,"nodeType":"150","messageId":"151","endLine":3,"endColumn":31},{"ruleId":"148","severity":1,"message":"159","line":1,"column":15,"nodeType":"150","messageId":"151","endLine":1,"endColumn":20},{"ruleId":"148","severity":1,"message":"165","line":1,"column":27,"nodeType":"150","messageId":"151","endLine":1,"endColumn":33},{"ruleId":"148","severity":1,"message":"166","line":4,"column":9,"nodeType":"150","messageId":"151","endLine":4,"endColumn":15},{"ruleId":"148","severity":1,"message":"167","line":1,"column":10,"nodeType":"150","messageId":"151","endLine":1,"endColumn":13},{"ruleId":"148","severity":1,"message":"168","line":1,"column":22,"nodeType":"150","messageId":"151","endLine":1,"endColumn":25},{"ruleId":"148","severity":1,"message":"165","line":1,"column":34,"nodeType":"150","messageId":"151","endLine":1,"endColumn":40},{"ruleId":"148","severity":1,"message":"166","line":9,"column":9,"nodeType":"150","messageId":"151","endLine":9,"endColumn":15},{"ruleId":"148","severity":1,"message":"169","line":2,"column":17,"nodeType":"150","messageId":"151","endLine":2,"endColumn":26},{"ruleId":"148","severity":1,"message":"170","line":43,"column":10,"nodeType":"150","messageId":"151","endLine":43,"endColumn":16},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'CardDeck' is defined but never used.","'Figure' is defined but never used.","'time' is defined but never used.","'MusicBlock' is defined but never used.","'listCoupons' is assigned a value but never used.","'noMetamask' is assigned a value but never used.","'DisplayCard' is defined but never used.","'Image' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","noTargetBlank",{"range":"171","text":"172"},"'Button' is defined but never used.","'imgSrc' is assigned a value but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'useEffect' is defined but never used.","'tokens' is assigned a value but never used.",[2322,2322]," rel=\"noreferrer\""]