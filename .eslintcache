[{"/Users/mac/Desktop/hackathon/bsc-coupon/src/index.js":"1","/Users/mac/Desktop/hackathon/bsc-coupon/src/App.js":"2","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/AlertModal.js":"3","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/history.js":"4","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/CreateCoupon.js":"5","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Header.js":"6","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Main.js":"7","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Faucet.js":"8","/Users/mac/Desktop/hackathon/bsc-coupon/src/stores/useWeb3Store.js":"9","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/market/marketPage.js":"10","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/nft/nftPage.js":"11","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/ViewCoupon.js":"12","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/account/accountPage.js":"13","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/SuccessModal.js":"14","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Loading.js":"15","/Users/mac/Desktop/hackathon/bsc-coupon/src/api/getBnbUsdt.js":"16","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/DisplayTickets.js":"17","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/BuyTicket.js":"18","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Claim.js":"19","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/musicTable.js":"20","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/playListBlock.js":"21","/Users/mac/Desktop/hackathon/bsc-coupon/src/utils/persist.js":"22","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/config.js":"23","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/image/imageBlock.js":"24","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/time.js":"25","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/flow/flowBlock.js":"26","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/precision.js":"27","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/CreateNft.js":"28","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/video/videoBlock.js":"29"},{"size":168,"mtime":1622188700418,"results":"30","hashOfConfig":"31"},{"size":3438,"mtime":1622212518969,"results":"32","hashOfConfig":"31"},{"size":534,"mtime":1621608591878,"results":"33","hashOfConfig":"31"},{"size":93,"mtime":1621608591880,"results":"34","hashOfConfig":"31"},{"size":15464,"mtime":1621608591879,"results":"35","hashOfConfig":"31"},{"size":5087,"mtime":1622212593663,"results":"36","hashOfConfig":"31"},{"size":4668,"mtime":1622215094433,"results":"37","hashOfConfig":"31"},{"size":4587,"mtime":1622211742740,"results":"38","hashOfConfig":"31"},{"size":3515,"mtime":1622219638222,"results":"39","hashOfConfig":"31"},{"size":4431,"mtime":1622218667735,"results":"40","hashOfConfig":"31"},{"size":223,"mtime":1621952476766,"results":"41","hashOfConfig":"31"},{"size":14210,"mtime":1621666179386,"results":"42","hashOfConfig":"31"},{"size":3604,"mtime":1621954101083,"results":"43","hashOfConfig":"31"},{"size":643,"mtime":1621608591880,"results":"44","hashOfConfig":"31"},{"size":528,"mtime":1622164031984,"results":"45","hashOfConfig":"31"},{"size":470,"mtime":1621946606496,"results":"46","hashOfConfig":"31"},{"size":1334,"mtime":1621608591879,"results":"47","hashOfConfig":"31"},{"size":6486,"mtime":1621608591879,"results":"48","hashOfConfig":"31"},{"size":5049,"mtime":1621608591879,"results":"49","hashOfConfig":"31"},{"size":2808,"mtime":1622218677424,"results":"50","hashOfConfig":"31"},{"size":2004,"mtime":1622218682237,"results":"51","hashOfConfig":"31"},{"size":169,"mtime":1622165362210,"results":"52","hashOfConfig":"31"},{"size":276,"mtime":1622222056883,"results":"53","hashOfConfig":"31"},{"size":1318,"mtime":1622218658190,"results":"54","hashOfConfig":"31"},{"size":838,"mtime":1621665548570,"results":"55","hashOfConfig":"31"},{"size":2866,"mtime":1622218659544,"results":"56","hashOfConfig":"31"},{"size":351,"mtime":1621665553255,"results":"57","hashOfConfig":"31"},{"size":14617,"mtime":1622222734606,"results":"58","hashOfConfig":"31"},{"size":825,"mtime":1622217252200,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1ucm7gu",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"62"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"62"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"62"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"62"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"62"},"/Users/mac/Desktop/hackathon/bsc-coupon/src/index.js",[],[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/App.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/AlertModal.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/history.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/CreateCoupon.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Header.js",["135"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Nav,\n  Navbar,\n  Button,\n  FormControl,\n  InputGroup,\n  Row,\n  Col,\n  Image,\n  Container,\n} from \"react-bootstrap\";\n\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport { getBnbPrice } from \"../api/getBnbUsdt\";\nimport useWeb3Store from \"../stores/useWeb3Store\";\n\nexport default function Header() {\n  const {\n    userAddress,\n    initMetaMask,\n    isConnectWalletSuccess,\n    closeConnectWalletModel,\n    isShowConnectWalletSuccess,\n  } = useWeb3Store();\n\n  const [bnbPrice, setBnbPrice] = useState(\"\");\n  const [errorModal, setErrorModal] = useState(false);\n  const [errorMetamaskInstallModal, setErrorMetamaskInstallModal] = useState(\n    false\n  );\n\n  const handleConnectMetamask = async () => {\n    await initMetaMask();\n  };\n\n  const isHaveUser =\n    typeof userAddress !== \"undefined\" &&\n    userAddress !== null &&\n    userAddress !== \"\";\n\n  useEffect(() => {\n    async function _fetchData() {\n      setBnbPrice(await getBnbPrice());\n      setInterval(async () => {\n        setBnbPrice(await getBnbPrice());\n      }, 3000);\n    }\n    _fetchData();\n  }, []);\n\n  var _userAddress = userAddress;\n  if (userAddress && userAddress.length >= 8) {\n    _userAddress = userAddress.substring(0, 8) + \"...\";\n  }\n\n  return (\n    <>\n      <div className=\"top-navbar-container mb-4\">\n        <Navbar\n          className=\"top-navbar pt-2 pl-5 pr-5\"\n          fixed=\"top\"\n          collapseOnSelect\n          variant=\"dark\"\n        >\n          <Navbar.Brand href=\"#\" className=\"align-items-end\">\n            <img\n              alt=\"\"\n              src=\"/logo-removebg.png\"\n              width=\"42\"\n              height=\"42\"\n              className=\"ml-5 d-inline-block align-top mr-1\"\n            />\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Nav className=\"mr-auto\">\n            <Nav.Link className=\"menu-btn menu-main-btn\" href=\"#market\">\n              Market\n            </Nav.Link>\n            <Nav.Link className=\"menu-btn menu-account\" href=\"#account\">\n              Account\n              <div className=\"menu-dot\"></div>\n            </Nav.Link>\n            <Nav.Link className=\"menu-btn\" href=\"#nft\">\n              NFT\n            </Nav.Link>\n          </Nav>\n          <Nav>\n            <InputGroup className=\"\">\n              <InputGroup.Prepend className=\"search-prepend\">\n                <InputGroup.Text id=\"basic-addon1\">\n                  <span className=\"fa fa-search form-control-feedback\"></span>\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n\n              <FormControl\n                type=\"text\"\n                placeholder=\"Search...\"\n                className=\"header-search mr-sm-2\"\n              />\n            </InputGroup>\n          </Nav>\n          <Nav>\n            {isHaveUser ? (\n              <Nav.Link\n                href=\"#0\"\n                className=\"ml-3 user-profile-menu justify-content-center align-items-center\"\n              >\n                <Row className=\"justify-content-center align-items-center\">\n                  <Image src=\"/user.svg\" className=\"coin-logo mr-2\" />\n                  {_userAddress}\n                </Row>\n              </Nav.Link>\n            ) : (\n              <Button className=\"login-btn\" onClick={handleConnectMetamask}>\n                Connect Metamask\n              </Button>\n            )}\n          </Nav>\n        </Navbar>\n        <AlertModal open={errorModal} toggle={() => setErrorModal(false)}>\n          You should connect with Metamask.\n        </AlertModal>\n\n        <AlertModal\n          open={errorMetamaskInstallModal}\n          toggle={() => setErrorMetamaskInstallModal(false)}\n        >\n          You need install Metamask.\n        </AlertModal>\n\n        <AlertModal\n          open={errorMetamaskInstallModal}\n          toggle={() => setErrorMetamaskInstallModal(false)}\n        >\n          You need install Metamask.\n        </AlertModal>\n\n        <SuccessModal\n          open={isShowConnectWalletSuccess}\n          toggle={() => closeConnectWalletModel()}\n          onConfirm={() => closeConnectWalletModel()}\n        >\n          Connect user Metamask success!\n        </SuccessModal>\n      </div>\n\n      <Container className=\"bnb-price mt-4 pr-3\">\n        <Row>\n          <Col></Col>\n          <div className=\"mr-4 pr-2\">\n            <span style={{ display: \"flex\" }}>\n              <span style={{ height: \"25px\", color: \"transparent\" }}>\n                Loading...\n              </span>\n              {bnbPrice && (\n                <div className=\"fadein\">\n                  <Image src=\"/bnb.png\" className=\"coin-logo\" />\n\n                  <span className=\"coin-name\">1 BNB ≈ </span>\n                  <Image src=\"/usdt.svg\" className=\"coin-logo\" />\n                  <span className=\"coin-name\">\n                    {bnbPrice.substr(0, bnbPrice.length - 6)} USDT\n                  </span>\n                </div>\n              )}\n            </span>\n          </div>\n        </Row>\n      </Container>\n    </>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Main.js",["136"],"import React, { useEffect, useState } from \"react\";\nimport { Container, Row, Col, Nav } from \"react-bootstrap\";\nimport Loading from \"./Loading\";\n\nimport MusicTable from \"./music/musicTable\";\nimport PlayListBlock from \"./music/playListBlock\";\nimport ImageBlock from \"./image/imageBlock\";\nimport VideoBlock from \"./video/videoBlock\";\nimport FlowBlock from \"./flow/flowBlock\";\n\nimport useWeb3Store from \"../stores/useWeb3Store\";\n\nexport default function Main() {\n  const { bePublicContract } = useWeb3Store();\n\n  const [bodyTabKey, setTabKey] = useState(\"music\");\n  const [allNft, setAllNft] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  const getCoupons = async () => {\n    if (bePublicContract == null) {\n      return;\n    }\n    const allCoupons = [];\n    const allCouponsMap = {};\n    const couponCount = await bePublicContract.methods.totalCoupons().call();\n    // const couponCount = 5;\n\n    if (Number(couponCount) === 0) {\n      setLoading(false);\n    }\n\n    for (let i = couponCount - 1; i >= 0; i--) {\n      const distCoupon = await bePublicContract.methods.allCoupons(i).call();\n\n      allCoupons.push(distCoupon);\n      if (\n        distCoupon.couponTokenName &&\n        distCoupon.couponTokenName.includes(\"|\")\n      ) {\n        distCoupon.type = distCoupon.couponTokenName.split(\"|\")[0];\n        distCoupon.name = distCoupon.couponTokenName.split(\"|\")[1];\n      }\n      allCouponsMap[distCoupon.couponAddress] = distCoupon;\n    }\n\n    console.log(\"allCoupons\", allCoupons);\n    console.log(\"allCouponsMap\", allCouponsMap);\n    console.log(\"couponCount\", couponCount);\n    console.log(\"allNft:  =>\", allNft);\n\n    setAllNft(allCouponsMap);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (Object.values(allNft || {}).length === 0) {\n      getCoupons();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"mb-5 pb-5\">\n      <Container className=\"mb-4\">\n        <Col>\n          <Row className=\"ml-2 mt-5 mb-2\">\n            <h2 className=\"font-weight-bold display-6\">Highlights NFT</h2>\n          </Row>\n          <Row>\n            {Object.keys(allNft || {}).map(function (_key, i) {\n              if (i < 3) {\n                return (\n                  <Col xs key={_key}>\n                    <FlowBlock\n                      imgSrc={allNft[_key].baseTokenURI}\n                      title={allNft[_key].type}\n                      subTitle={allNft[_key].name}\n                      caption={allNft[_key].couponTokenSymbol}\n                      href={allNft[_key].dataURI || \"\"}\n                    />\n                  </Col>\n                );\n              }\n              return null;\n            })}\n          </Row>\n        </Col>\n      </Container>\n      <Container className=\"pt-0 mb-5\">\n        <Col className=\"p-0\">\n          <Row className=\"ml-4 mb-5 mt-5\">\n            <Nav\n              bg=\"dark\"\n              variant=\"dark\"\n              onSelect={(k) => setTabKey(k)}\n              defaultActiveKey={bodyTabKey}\n            >\n              <Nav.Item>\n                <Nav.Link\n                  className={`tab-title font-weight-bold display-6 ${\n                    bodyTabKey && bodyTabKey === \"music\" && \"tab-title-active\"\n                  }`}\n                  eventKey=\"music\"\n                >\n                  MUSIC\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link\n                  className={`tab-title font-weight-bold display-6 ${\n                    bodyTabKey && bodyTabKey === \"image\" && \"tab-title-active\"\n                  }`}\n                  eventKey=\"image\"\n                >\n                  IMAGE\n                </Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link\n                  className={`tab-title font-weight-bold display-6 ${\n                    bodyTabKey && bodyTabKey === \"video\" && \"tab-title-active\"\n                  }`}\n                  eventKey=\"video\"\n                >\n                  VIDEO\n                </Nav.Link>\n              </Nav.Item>\n            </Nav>\n          </Row>\n          {bodyTabKey && bodyTabKey === \"music\" && (\n            <>\n              <PlayListBlock allNft={allNft} />\n              <MusicTable allNft={allNft} />\n            </>\n          )}\n          {bodyTabKey && bodyTabKey === \"image\" && (\n            <>\n              <ImageBlock allNft={allNft} />\n            </>\n          )}\n          {bodyTabKey && bodyTabKey === \"video\" && (\n            <VideoBlock allNft={allNft} />\n          )}\n        </Col>\n      </Container>\n    </div>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Faucet.js",["137"],"import React, { useEffect, useState } from \"react\";\nimport Loading from \"./Loading\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport { Button, Card, CardDeck } from \"react-bootstrap\";\n\nexport default function Faucet() {\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false,\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false,\n  });\n  const [tokens] = useState([\n    {\n      name: \"BNB\",\n      address: \"0x2B8fF854c5e16cF35B9A792390Cc3a2a60Ec9ba2\",\n      status: false,\n    },\n    {\n      name: \"USDC\",\n      address: \"0x65471bdCDb3720Dc07B914756884b50a2b4395fb\",\n      status: false,\n    },\n  ]);\n\n  const handleGetTestTokens = (tokenAddress) => {\n    window.tokenFaucet.methods\n      .claimTestTokens(tokenAddress)\n      .send()\n      .on(\"transactionHash\", () => {\n        setProcessing(true);\n      })\n      .on(\"receipt\", (_) => {\n        setProcessing(false);\n      })\n      .catch((error) => {\n        setProcessing(false);\n        setErrorModal({\n          open: true,\n          msg: error.message,\n        });\n      });\n  };\n\n  const checkIsAlreadyClaimed = () => {\n    tokens.forEach(async (token, i) => {\n      console.log(\"ff\", token.address);\n      const status = await window.tokenFaucet.methods\n        .alreadyClaimed(window.userAddress, token.address)\n        .call();\n\n      tokens[i].status = status;\n\n      if (i === tokens.length - 1) {\n        setLoading(false);\n      }\n    });\n  };\n\n  useEffect(() => {\n    checkIsAlreadyClaimed();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  return (\n    <div>\n      <CardDeck>\n        <Card className=\"hidden-card\"></Card>\n        <Card className=\"view-pool-card\">\n          <Card.Header>\n            <u>Token Faucet</u>\n          </Card.Header>\n\n          <Card.Body>\n            <div style={{ marginBottom: \"30px\" }}>\n              <strong>If you want to get token</strong>\n              <br />\n              Please use{\" \"}\n              <a\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                href=\"https://testnet.binance.org/faucet-smart\"\n                style={{ fontWeight: \"bold\" }}\n              >\n                {\" \"}\n                Faucet{\" \"}\n              </a>\n            </div>\n\n            {tokens.map((token, key) => (\n              <Card\n                key={key}\n                className=\"mx-auto form-card text-center\"\n                style={{\n                  backgroundColor: \"rgb(253, 255, 255)\",\n                  marginTop: \"4%\",\n                  marginBottom: \"4%\",\n                }}\n              >\n                <Card.Header>\n                  <u>{token.name} Faucet</u>\n                </Card.Header>\n\n                {!token.status ? (\n                  <Card.Body>\n                    <p>\n                      You can get Test <strong>{token.name} </strong>\n                    </p>\n                    <Button\n                      style={{ marginTop: \"10px\" }}\n                      variant=\"success\"\n                      onClick={() => handleGetTestTokens(token.address)}\n                    >\n                      {processing ? (\n                        <div className=\"d-flex align-items-center\">\n                          Processing\n                          <span className=\"loading ml-2\"></span>\n                        </div>\n                      ) : (\n                        <div>GET 100 {token.name}</div>\n                      )}\n                    </Button>\n                  </Card.Body>\n                ) : (\n                  <Card.Body>\n                    <p style={{ color: \"gray\" }}>\n                      You have already claimed your 100 {token.name}.\n                    </p>\n                  </Card.Body>\n                )}\n              </Card>\n            ))}\n          </Card.Body>\n        </Card>\n\n        <Card className=\"hidden-card\"></Card>\n      </CardDeck>\n\n      <AlertModal\n        open={errorModal.open}\n        toggle={() =>\n          setErrorModal({\n            ...errorModal,\n            open: false,\n          })\n        }\n      >\n        {errorModal.msg}\n      </AlertModal>\n\n      <SuccessModal\n        open={successModal.open}\n        toggle={() =>\n          setSuccessModal({\n            ...successModal,\n            open: false,\n          })\n        }\n      >\n        {successModal.msg}\n      </SuccessModal>\n    </div>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/stores/useWeb3Store.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/market/marketPage.js",["138","139","140"],"import React, { useEffect, useState } from \"react\";\nimport { Col, Image, Row, Container, Button } from \"react-bootstrap\";\n\nimport Loading from \"../Loading\";\nimport useWeb3Store from \"../../stores/useWeb3Store\";\n\nimport \"./marketPage.css\";\n\nexport default function MarketPage() {\n  const { bePublicContract } = useWeb3Store();\n\n  const [allNft, setAllNft] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  const getCoupons = async () => {\n    if (bePublicContract == null) {\n      return;\n    }\n    const allCouponsMap = {};\n    const couponCount = await bePublicContract.methods.totalCoupons().call();\n\n    if (Number(couponCount) === 0) {\n      setLoading(false);\n    }\n\n    for (let i = couponCount - 1; i >= 0; i--) {\n      const distCoupon = await bePublicContract.methods.allCoupons(i).call();\n\n      if (\n        distCoupon.couponTokenName &&\n        distCoupon.couponTokenName.includes(\"|\")\n      ) {\n        distCoupon.type = distCoupon.couponTokenName.split(\"|\")[0];\n        distCoupon.name = distCoupon.couponTokenName.split(\"|\")[1];\n      }\n      allCouponsMap[distCoupon.couponAddress] = distCoupon;\n    }\n\n    setAllNft(allCouponsMap);\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (Object.values(allNft || {}).length === 0) {\n      getCoupons();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"market-container fadein\">\n      <div className=\"market-bg-image\"></div>\n      <Container className=\"market-bg-text \">\n        <Row className=\"justify-content-center mb-4 pb-2\">\n          <h1 className=\"market-heading\">CREATE & TRADE YOUR MUSIC NFT'S</h1>\n        </Row>\n        <Row className=\"mb-4 pb-2\">\n          <Col className=\"text-right\">\n            <a\n              href=\"#account\"\n              className=\"text-center music-btn\"\n              style={{ width: 238 }}\n            >\n              ISSUE NEW NFT\n            </a>\n          </Col>\n          <Col className=\"text-left\">\n            <Button className=\"text-center normal-btn\" style={{ width: 238 }}>\n              TUTORIAL MINT NFT\n            </Button>\n          </Col>\n        </Row>\n      </Container>\n      {loading && <Loading />}\n      <div className=\"pb-5\"></div>\n      {!loading && (\n        <div className=\"ml-5 mr-5 pl-5 pr-5\">\n          {Object.keys(allNft || {}).map(function (key, i) {\n            return (\n              <Container key={key} className=\" mt-5 nft-card pt-4 pb-4\">\n                <div className=\"\">\n                  <Row xs={12} className=\"m-0 align-items-center\">\n                    <Col xs={2} className=\"\">\n                      <a\n                        data-fancybox={\n                          allNft[key].type === \"image\" ? \"gallery\" : true\n                        }\n                        data-type={\n                          allNft[key].type === \"image\" ? null : \"iframe\"\n                        }\n                        data-src={\n                          allNft[key].dataURI || allNft[key].baseTokenURI\n                        }\n                        href=\"javascript:void(0)\"\n                      >\n                        <Image\n                          loading=\"lazy\"\n                          className=\"fadein\"\n                          src={allNft[key].baseTokenURI}\n                          rounded\n                          fluid\n                        />\n                      </a>\n                    </Col>\n                    <Col xs={8} className=\"text-left\">\n                      <p className=\"display-6\">{allNft[key].name}</p>\n                      <p className=\"gray-text mt-2\">{allNft[key].name}</p>\n                      <p className=\"gray-text caption\">\n                        {allNft[key].couponTokenSymbol}\n                      </p>\n                    </Col>\n                    <Col xs={2} className=\"text-right\">\n                      <Button style={{ width: 200 }} className=\"music-btn\">\n                        {/* BUY THIS NFT */}\n                        {allNft[key].ticketPrice} {allNft[key].description}\n                      </Button>\n                      <div className=\"pb-3\"></div>\n\n                      <div className=\"pb-2\"></div>\n                    </Col>\n                  </Row>\n                </div>\n              </Container>\n            );\n          })}\n        </div>\n      )}\n      <div className=\"pb-5\"></div>\n      <div className=\"pb-5\"></div>\n    </div>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/nft/nftPage.js",["141"],"import CreateNft from \"../CreateNft\";\nimport { Container } from \"react-bootstrap\";\n\nexport default function NftPage({ allNft }) {\n  return (\n    <Container className=\"mt-4 pt-4\">\n      <CreateNft />\n    </Container>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/ViewCoupon.js",["142","143","144","145"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport history from \"./history\";\nimport Loading from \"./Loading\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport { precision } from \"../web3/precision\";\nimport { time } from \"../web3/time\";\nimport * as erc20Abi from \"../abis/erc20Abi.json\";\nimport * as distCouponAbi from \"../abis/distCoupon.json\";\nimport { Card, Row, Col, Image, Button, CardDeck } from \"react-bootstrap\";\nimport BuyTicket from \"./BuyTicket\";\nimport DisplayTickets from \"./DisplayTickets\";\nimport Claim from \"./Claim\";\n\nexport default function ViewPool() {\n  let routes;\n  const BNB = \"0x2B8fF854c5e16cF35B9A792390Cc3a2a60Ec9ba2\";\n  const USDC = \"0x65471bdCDb3720Dc07B914756884b50a2b4395fb\";\n  const { couponAddress, nftToken, buyToken } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n  let [erc20Instance, setErc20Instance] = useState();\n  let [contractInstance, setContractInstance] = useState();\n  const [state, setState] = useState({\n    totalTicket: 0,\n    ticketPrice: 0,\n    distInterval: 0,\n    distCount: 0,\n    couponStartTimestamp: 0,\n    ticketBuyEndTime: 0,\n    nextDistStartTime: 0,\n    nftBalance: 0,\n    tickets: [],\n    couponResult: 0,\n    tokenBaseURI: \"\",\n    isWinnerTicket: false,\n    couponWinnerAddr: \"\",\n    erc20Balance: 0,\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false,\n  });\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false,\n  });\n  const [showBuyTicket, setShowBuyTicket] = useState(false);\n  const [showMetamaskError, setShowMetamaskError] = useState(false);\n\n  const fetchContractData = async () => {\n    try {\n      if (!loading) setLoading(true);\n\n      let result;\n      if (!contractInstance) {\n        result = await createContractInstance();\n      }\n\n      contractInstance = contractInstance ? contractInstance : result.contract;\n      erc20Instance = erc20Instance ? erc20Instance : result.erc20;\n\n      if (contractInstance) {\n        setShowBuyTicket(false);\n\n        const totalTicket = await contractInstance.methods\n          .ticketNumber()\n          .call();\n\n        const ticketPrice = await contractInstance.methods.ticketPrice().call();\n\n        const distInterval = await contractInstance.methods\n          .distInterval()\n          .call();\n\n        const distCount = await contractInstance.methods.distCount().call();\n\n        const couponStartTimestamp = await contractInstance.methods\n          .couponStartTime()\n          .call();\n\n        const ticketBuyEndTime = await contractInstance.methods\n          .ticketBuyEndTime()\n          .call();\n\n        const nextDistStartTime = await contractInstance.methods\n          .getNextDistTimestamp()\n          .call();\n\n        const nftBalance = await contractInstance.methods\n          .balanceOf(window.userAddress)\n          .call();\n\n        const tokenBaseURI = await contractInstance.methods.baseURI().call();\n\n        let couponResult = 0,\n          couponWinnerAddr = \"\";\n        if (\n          Number(distCount) === Number(totalTicket) - 1 &&\n          time.currentUnixTime() > Number(ticketBuyEndTime)\n        ) {\n          couponResult = await contractInstance.methods.getFinalResult().call();\n\n          couponWinnerAddr = await contractInstance.methods\n            .getCouponWinner()\n            .call();\n        }\n\n        let tickets = [],\n          isWinnerTicket = false;\n        for (let i = 0; i < nftBalance; i++) {\n          const ticketNumber = await contractInstance.methods\n            .tokenOfOwnerByIndex(window.userAddress, i)\n            .call();\n\n          const isValid = await contractInstance.methods\n            .stillValidTicket(ticketNumber)\n            .call();\n\n          tickets.push({ ticketNumber, isValid });\n\n          if (Number(couponResult) === Number(ticketNumber)) {\n            isWinnerTicket = true;\n          }\n        }\n\n        let erc20Balance = await precision.remove(\n          await erc20Instance.methods.balanceOf(window.userAddress).call(),\n          await erc20Instance.methods.decimals().call()\n        );\n\n        console.log(\"fd\", window.userAddress + \"/\" + erc20Balance);\n\n        setState({\n          totalTicket,\n          ticketPrice,\n          distInterval,\n          distCount,\n          couponStartTimestamp,\n          ticketBuyEndTime,\n          nextDistStartTime,\n          nftBalance,\n          tickets,\n          couponResult,\n          tokenBaseURI,\n          isWinnerTicket,\n          couponWinnerAddr,\n          erc20Balance,\n        });\n\n        setLoading(false);\n      }\n    } catch (error) {\n      setErrorModal({\n        open: true,\n        msg: error.message,\n      });\n    }\n  };\n\n  const createContractInstance = () => {\n    return new Promise((resolve, reject) => {\n      try {\n        const contract = new window.web3.eth.Contract(\n          distCouponAbi.default,\n          couponAddress,\n          { from: window.userAddress }\n        );\n\n        const erc20 = new window.web3.eth.Contract(\n          erc20Abi.default,\n          buyToken === \"BNB\" ? BNB : USDC,\n          { from: window.userAddress }\n        );\n\n        console.log(\"dss\", erc20);\n\n        setErc20Instance(erc20);\n        setContractInstance(contract);\n        resolve({ contract, erc20 });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  const handleDist = () => {\n    contractInstance.methods\n      .dist(generateRandom())\n      .send()\n      .on(\"transactionHash\", () => {\n        setProcessing(true);\n      })\n      .on(\"receipt\", () => {\n        setProcessing(false);\n        fetchContractData();\n      })\n      .catch((error) => {\n        setProcessing(false);\n        setErrorModal({\n          open: true,\n          msg: error.message,\n        });\n      });\n  };\n\n  const generateRandom = () => {\n    return Math.floor(Math.random() * 10 ** 15);\n  };\n\n  const getTokenSymbol = () => {\n    return buyToken === \"BNB\" ? \"BNB\" : \"USDC\";\n  };\n\n  useEffect(() => {\n    if (\n      typeof window.ethereum === \"undefined\" ||\n      !window.ethereum.isConnected() ||\n      !window.ethereum.selectedAddress\n    ) {\n      setLoading(false);\n      setShowMetamaskError(true);\n    }\n\n    if (\n      typeof window.ethereum !== \"undefined\" &&\n      window.ethereum.selectedAddress &&\n      window.ethereum.isConnected()\n    ) {\n      fetchContractData();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (loading) {\n    routes = <Loading />;\n  } else {\n    routes = (\n      <div>\n        {showMetamaskError ? (\n          <AlertModal\n            open={showMetamaskError}\n            toggle={() => {\n              setShowMetamaskError(false);\n              history.push(\"/\");\n            }}\n          >\n            <div>\n              {typeof window.ethereum === \"undefined\" ? (\n                <div>You can't use these features without Metamask.</div>\n              ) : (\n                <div>Please connect to Metamask to use this feature !!</div>\n              )}\n            </div>\n          </AlertModal>\n        ) : (\n          <CardDeck>\n            <Card className=\"hidden-card\"></Card>\n\n            <Card className=\"mx-auto view-pool-card\">\n              <Card.Body style={{ textAlign: \"left\", fontWeight: \"bold\" }}>\n                <p className=\"view-pool-header\">\n                  <u>Distribution Coupon</u>\n                </p>\n\n                <Row style={{ paddingBottom: \"20px\" }}>\n                  <Col>\n                    <u>Total Tickets</u>\n                    <span> :</span>\n                    <span className=\"float-right\">{state.totalTicket}</span>\n                  </Col>\n\n                  <Col>\n                    <u>Ticket Price</u>\n                    <span> :</span>\n                    <span className=\"float-right\">\n                      <span>{state.ticketPrice} </span>\n                      {getTokenSymbol()}\n                    </span>\n                  </Col>\n                </Row>\n\n                <Row style={{ paddingBottom: \"20px\" }}>\n                  <Col>\n                    <u>Distribution Complete</u>\n                    <span> :</span>\n                    <span className=\"float-right\">{state.distCount}</span>\n                  </Col>\n\n                  <Col>\n                    <u>NFT Token</u>\n                    <span> :</span>\n                    <span className=\"float-right\">\n                      {state.tokenBaseURI !== \"\" ? (\n                        <a\n                          target=\"_blank\"\n                          href={state.tokenBaseURI}\n                          rel=\"noreferrer noopener\"\n                        >\n                          {nftToken}\n                        </a>\n                      ) : (\n                        <div>{nftToken}</div>\n                      )}\n                    </span>\n                  </Col>\n                </Row>\n\n                {Number(state.nextDistStartTime) > time.currentUnixTime() ? (\n                  <Row className=\"text-center\">\n                    <Col>\n                      <u>Next Distribution In</u>\n                      <span> : </span>\n                      <span>\n                        {time.getRemainingTime(state.nextDistStartTime)}\n                      </span>\n                    </Col>\n                  </Row>\n                ) : Number(state.distCount) === Number(state.totalTicket) - 1 &&\n                  Number(state.distCount) > 0 ? (\n                  <div>\n                    <div className=\"auction-alert-message\">\n                      Token Already Closed\n                    </div>\n                    <div className=\"auction-info-message\">\n                      Result: {state.tokenResult}\n                    </div>\n                  </div>\n                ) : null}\n\n                {time.currentUnixTime() > Number(state.nextDistStartTime) &&\n                Number(state.distCount) < Number(state.totalTicket) - 1 ? (\n                  <Row className=\"text-center\">\n                    <Col>\n                      <Button variant=\"info\" onClick={handleDist}>\n                        {processing ? (\n                          <div className=\"d-flex align-items-center\">\n                            Processing\n                            <span className=\"loading ml-2\"></span>\n                          </div>\n                        ) : (\n                          <div>Execute Distribution</div>\n                        )}\n                      </Button>\n\n                      <div className=\"info-message\">\n                        You will get {Number(state.ticketPrice) / 100}{\" \"}\n                        {getTokenSymbol()}\n                        <span> for executing this distribution.</span>\n                      </div>\n                    </Col>\n                  </Row>\n                ) : null}\n\n                {state.nftBalance > 0 ? (\n                  <DisplayTickets\n                    nftBalance={state.nftBalance}\n                    tickets={state.tickets}\n                  />\n                ) : null}\n\n                {showBuyTicket ? (\n                  <BuyTicket\n                    couponAddress={couponAddress}\n                    contractInstance={contractInstance}\n                    erc20Instance={erc20Instance}\n                    buyToken={buyToken === \"BNB\" ? \"BNB\" : \"USDC\"}\n                    availableBalance={state.erc20Balance}\n                    balanceNeeded={state.ticketPrice}\n                    callback={fetchContractData}\n                  />\n                ) : null}\n\n                {Number(state.isWinnerTicket) !== 0 ? (\n                  <Claim\n                    couponAddress={couponAddress}\n                    contractInstance={contractInstance}\n                    ticketNumber={state.couponResult}\n                    callback={fetchContractData}\n                  />\n                ) : Number(state.distCount) === Number(state.totalTicket) - 1 &&\n                  Number(state.distCount) > 0 &&\n                  Number(state.nftBalance) > 0 ? (\n                  state.couponWinnerAddr === window.userAddress ? (\n                    <div className=\"info-message\">\n                      You have already claimed your coupon for ticket number{\" \"}\n                      {state.couponResult}\n                    </div>\n                  ) : null\n                ) : Number(state.nftBalance) > 0 &&\n                  Number(state.distCount) > 0 &&\n                  Number(state.distCount) === Number(state.totalTicket) - 1 ? (\n                  <div className=\"info-message\">\n                    You don't have winner ticket.\n                  </div>\n                ) : null}\n              </Card.Body>\n\n              {time.currentUnixTime() < Number(state.ticketBuyEndTime) ? (\n                <Card.Footer className=\"view-pool-footer\">\n                  <Button\n                    onClick={() => setShowBuyTicket(true)}\n                    variant=\"success\"\n                  >\n                    {state.nftBalance > 0 ? (\n                      <div>Buy More Ticket</div>\n                    ) : (\n                      <div>Want to Buy Ticket ?</div>\n                    )}\n                  </Button>\n                </Card.Footer>\n              ) : Number(state.nftBalance) === 0 ? (\n                <div className=\"alert-message\">Participation time over.</div>\n              ) : (\n                <div style={{ marginBottom: \"20px\" }}></div>\n              )}\n            </Card>\n\n            <Card className=\"hidden-card\"></Card>\n          </CardDeck>\n        )}\n\n        <AlertModal\n          open={errorModal.open}\n          toggle={() =>\n            setErrorModal({\n              ...errorModal,\n              open: false,\n            })\n          }\n        >\n          {errorModal.msg}\n        </AlertModal>\n\n        <SuccessModal\n          open={successModal.open}\n          toggle={() =>\n            setSuccessModal({\n              ...successModal,\n              open: false,\n            })\n          }\n        >\n          {successModal.msg}\n        </SuccessModal>\n      </div>\n    );\n  }\n\n  return routes;\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/account/accountPage.js",["146"],"import { Col, Image, Row, Container, Button, Nav } from \"react-bootstrap\";\nimport React, { useEffect, useState } from \"react\";\n\nimport ImageBlock from \"../image/imageBlock\";\nimport MusicTable from \"../music/musicTable\";\nimport VideoBlock from \"../video/videoBlock\";\nimport CreateNft from \"../CreateNft\";\n\nimport \"./accountPage.css\";\n\nexport default function AccountPage() {\n  var profileImg = \"/profile.svg\";\n  const [bodyTabKey, setTabKey] = useState(\"mintNFT\");\n\n  return (\n    <>\n      <Container className=\"w-75  \">\n        <div className=\"mt-5 pt-5 fadein\"></div>\n        <Row className=\"justify-content-center mb-4\">\n          <Image className=\"ml-4\" roundedCircle fluid src={profileImg}></Image>\n          <Col className=\"text-left pt-2\">\n            <p className=\"display-6 mb-1 font-weight-bold\">Anonymous</p>\n            <p>{window.userAddress}</p>\n          </Col>\n          <Button className=\"align-self-center text-center normal-btn\">\n            EDIT\n          </Button>\n        </Row>\n\n        <Nav\n          bg=\"dark\"\n          variant=\"dark\"\n          onSelect={(k) => setTabKey(k)}\n          defaultActiveKey={bodyTabKey}\n        >\n          {/* <Nav.Item>\n            <Nav.Link\n              className={`tab-title font-weight-bold display-6 ${\n                bodyTabKey && bodyTabKey === \"myNFT\" && \"tab-title-active\"\n              }`}\n              eventKey=\"myNFT\"\n            >\n              MY NFTS\n            </Nav.Link>\n          </Nav.Item> */}\n          <Nav.Item>\n            <Nav.Link\n              className={`tab-title font-weight-bold display-6 ${\n                bodyTabKey && bodyTabKey === \"mintNFT\" && \"tab-title-active\"\n              }`}\n              eventKey=\"mintNFT\"\n            >\n              MINT NFTS\n            </Nav.Link>\n          </Nav.Item>\n          {/* <Nav.Item>\n            <Nav.Link\n              className={`tab-title font-weight-bold display-6 ${\n                bodyTabKey &&\n                bodyTabKey === \"configAccount\" &&\n                \"tab-title-active\"\n              }`}\n              eventKey=\"configAccount\"\n            >\n              CONFIG\n            </Nav.Link>\n          </Nav.Item> */}\n        </Nav>\n\n        {bodyTabKey && bodyTabKey === \"myNFT\" && (\n          <div className=\"fadein\">\n            <Container className=\"mt-4\">\n              <Col>\n                <Row className=\"\">\n                  <h2 className=\"font-weight-bold display-6\">Music</h2>\n                </Row>\n              </Col>\n            </Container>\n            <MusicTable />\n            <div className=\"dropdown-divider m-5\"></div>\n            <Container className=\"mb-3\">\n              <Col>\n                <Row className=\"\">\n                  <h2 className=\"font-weight-bold display-6\">Image</h2>\n                </Row>\n              </Col>\n            </Container>\n            <ImageBlock />\n            <div className=\"dropdown-divider m-5\"></div>\n            <Container className=\"mb-3\">\n              <Col>\n                <Row className=\"\">\n                  <h2 className=\"font-weight-bold display-6\">Video</h2>\n                </Row>\n              </Col>\n            </Container>\n            <VideoBlock />\n          </div>\n        )}\n        {bodyTabKey && bodyTabKey === \"mintNFT\" && (\n          <>\n            <div className=\"fadein mb-5 pb-5\">\n              <CreateNft />\n            </div>\n          </>\n        )}\n        {bodyTabKey && bodyTabKey === \"configAccount\" && (\n          <div className=\"fadein\">\n            <p className=\"mt-5 pt-5 display-2\">COMING SOON</p>\n          </div>\n        )}\n      </Container>\n    </>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/SuccessModal.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Loading.js",["147"],"import React from \"react\";\n\nimport ReactLoading from \"react-loading\";\nimport { Image } from \"react-bootstrap\";\n\nexport default function Loading({ paddingTop = 90 }) {\n  return (\n    <div\n      className={`d-flex justify-content-center mt-5 g-pt-${paddingTop}`}\n      style={{ height: \"-webkit-fill-available\" }}\n    >\n      <ReactLoading\n        type={\"spin\"}\n        color={\"#343a40\"}\n        height={\"6%\"}\n        width={\"6%\"}\n      />\n      {/* <Image src=\"/loading.gif\" height={\"60%\"} width={\"60%\"} /> */}\n    </div>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/api/getBnbUsdt.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/DisplayTickets.js",["148"],"import React from \"react\";\n\nimport { Row, Col, Card, Image } from \"react-bootstrap\";\n\nexport default function DisplayTickets({\n    nftBalance,\n    tickets,\n}) {\n    return (\n        <Card\n            className=\"mx-auto form-card text-center\"\n            style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n        >\n            <Card.Header>\n                <u>Your Tickets</u>\n            </Card.Header>\n\n            <Card.Body>\n                <div style={{ marginBottom: \"20px\", color: \"green\", fontSize: \"large\" }}>\n                    You have {nftBalance} Tickets\n                </div>\n\n                {tickets.map((ticket, key) => (\n                    <Row key={key} className=\"text-center\" style={{ paddingBottom: \"20px\" }}>\n                        <Col>\n                            <u>Ticket Number</u>\n                            <span> : </span>\n                            <span>{ticket.ticketNumber}</span>\n                        </Col>\n                        <Col>\n                            <u>Still Valid</u>\n                            <span> : </span>\n                            {ticket.isValid ?\n                                    'yes' :\n                                    'no'}\n                        </Col>\n                    </Row>\n                ))}\n            </Card.Body>\n        </Card>\n    );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/BuyTicket.js",["149","150","151"],"import React, { useState } from \"react\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport { precision } from \"../web3/precision\";\nimport { Row, Col, Button, Card } from \"react-bootstrap\";\n\nexport default function BuyTicket({\n    couponAddress,\n    contractInstance,\n    erc20Instance,\n    buyToken,\n    availableBalance,\n    balanceNeeded,\n    callback,\n}) {\n    const [approving, setApproving] = useState(false);\n    const [processing, setProcessing] = useState(false);\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const handleParticipate = async () => {\n        try {\n            const decimals = Number(\n                await erc20Instance.methods.decimals()\n                    .call()\n            );\n\n            console.log(decimals)\n\n            const allowance = await precision.remove(\n                await erc20Instance.methods.allowance(\n                    window.userAddress,\n                    couponAddress,\n                ).call(),\n                decimals,\n            );\n\n            if (Number(allowance) >= Number(balanceNeeded)) {\n                participate();\n            } else {\n                const success = await approveToken(\n                    allowance,\n                    decimals,\n                );\n\n                if (success) {\n                    participate();\n                }\n            }\n        } catch (error) {\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const participate = () => {\n        return new Promise((resolve, reject) => {\n            contractInstance.methods.buyTicket()\n                .send()\n                .on('transactionHash', () => {\n                    setProcessing(true);\n                })\n                .on('receipt', () => {\n                    setProcessing(false);\n                    setSuccessModal({\n                        open: true,\n                        msg: \"Congratulations 🎉 !! \" +\n                            \"You successfully bought ticket !!\",\n                    });\n                })\n                .catch((error) => {\n                    setProcessing(false);\n                    reject(error);\n                });\n        });\n    }\n\n    const approveToken = (allowance, decimals) => {\n        return new Promise(async (resolve, reject) => {\n            erc20Instance.methods.approve\n                (\n                    couponAddress,\n                    await precision.add(\n                        Number(balanceNeeded) - Number(allowance),\n                        decimals,\n                    )\n                )\n                .send()\n                .on('transactionHash', () => {\n                    setApproving(true);\n                })\n                .on('receipt', () => {\n                    setApproving(false);\n                    resolve(true);\n                })\n                .catch((error) => {\n                    setApproving(false);\n                    reject(error);\n                })\n        });\n    }\n\n    return (\n        <div>\n            <Card\n                className=\"mx-auto form-card text-center\"\n                style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n            >\n                <Card.Header>\n                    <u>Buy Ticket</u>\n                </Card.Header>\n\n                {Number(availableBalance) >= Number(balanceNeeded) ?\n                    <Card.Body>\n                        <Row className=\"text-center\" style={{ paddingBottom: \"20px\" }}>\n                            <Col>\n                                <u>Available Balance</u>\n                                <span> : </span>\n                                <span>{availableBalance} {buyToken}</span>\n                            </Col>\n                        </Row>\n\n                        <Row className=\"text-center\" style={{ paddingBottom: \"30px\" }}>\n                            <Col>\n                                <u>Balance Needed</u>\n                                <span> : </span>\n                                <span>{balanceNeeded} {buyToken}</span>\n                            </Col>\n                        </Row>\n\n                        <Row className=\"text-center\">\n                            <Col>\n                                <Button\n                                    onClick={handleParticipate}\n                                    variant=\"outline-success\"\n                                >\n                                    {approving ?\n                                        <div className=\"d-flex align-items-center\">\n                                            Approving\n                                        <span className=\"loading ml-2\"></span>\n                                        </div>\n                                        :\n                                        (processing ?\n                                            <div className=\"d-flex align-items-center\">\n                                                Processing\n                                        <span className=\"loading ml-2\"></span>\n                                            </div>\n                                            :\n                                            <div>Submit</div>\n                                        )\n                                    }\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Card.Body>\n                    :\n                    <Card.Body>\n                        <div className=\"alert-message\">\n                          You don't have available balance.\n                        </div>\n                    </Card.Body>\n                }\n            </Card>\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n                onConfirm={callback}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div >\n    );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Claim.js",["152","153","154","155"],"import React, { useState } from \"react\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport { Row, Col, Button, Card } from \"react-bootstrap\";\n\nexport default function Claim({\n    couponAddress,\n    contractInstance,\n    ticketNumber,\n    callback,\n}) {\n    const [approving, setApproving] = useState(false);\n    const [processing, setProcessing] = useState(false);\n    const [errorModal, setErrorModal] = useState({\n        msg: \"\",\n        open: false\n    });\n    const [successModal, setSuccessModal] = useState({\n        msg: \"\",\n        open: false\n    });\n\n    const handleClaimCoupon = async () => {\n        try {\n            const address = await contractInstance.methods\n                .getApproved(\n                    ticketNumber\n                ).call();\n\n            if (address === couponAddress) {\n                claimCoupon();\n            } else {\n                const success = await approveToken();\n                if (success) {\n                    claimCoupon();\n                }\n            }\n        } catch (error) {\n            setErrorModal({\n                open: true,\n                msg: error.message,\n            });\n        }\n    }\n\n    const claimCoupon = () => {\n        return new Promise(async (resolve, reject) => {\n            contractInstance.methods.claimPrize\n                (\n                    ticketNumber,\n                )\n                .send()\n                .on(\"transactionHash\", () => {\n                    setProcessing(true);\n                })\n                .on(\"receipt\", () => {\n                    setProcessing(false);\n                    setSuccessModal({\n                        open: true,\n                        msg:  \"You successfully claimed your coupon !!\",\n                    });\n                })\n                .catch((error) => {\n                    setProcessing(false);\n                    reject(error);\n                });\n        });\n    };\n\n    const approveToken = () => {\n        return new Promise(async (resolve, reject) => {\n            contractInstance.methods.approve\n                (\n                    couponAddress,\n                    ticketNumber,\n                )\n                .send()\n                .on(\"transactionHash\", () => {\n                    setApproving(true);\n                })\n                .on(\"receipt\", () => {\n                    setApproving(false);\n                    resolve(true);\n                })\n                .catch((error) => {\n                    setApproving(false);\n                    reject(error);\n                });\n        });\n    }\n\n    return (\n        <div>\n            <Card\n                className=\"mx-auto form-card text-center\"\n                style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n            >\n                <Card.Header>\n                    <u>Claim Coupon</u>\n                </Card.Header>\n\n                <Card.Body>\n                    <div>\n                        <div className=\"info-message\">                                                        \n                            Please click below button to claim your coupon.<br />\n                        </div>\n\n                        <Row className=\"text-center\" style={{ paddingTop: \"20px\", paddingBottom: \"20px\" }}>\n                            <Col>\n                                <Button variant=\"success\" onClick={handleClaimCoupon}>\n                                    {approving ?\n                                        <div className=\"d-flex align-items-center\">\n                                            Approving\n                                        <span className=\"loading ml-2\"></span>\n                                        </div>\n                                        :\n                                        (processing ?\n                                            <div className=\"d-flex align-items-center\">\n                                                Processing\n                                        <span className=\"loading ml-2\"></span>\n                                            </div>\n                                            :\n                                            <div>Submit</div>\n                                        )\n                                    }\n                                </Button>\n                            </Col>\n                        </Row>\n                    </div>\n                </Card.Body>\n\n            </Card>\n\n            <AlertModal\n                open={errorModal.open}\n                toggle={() => setErrorModal({\n                    ...errorModal, open: false\n                })}\n            >\n                {errorModal.msg}\n            </AlertModal>\n\n            <SuccessModal\n                open={successModal.open}\n                toggle={() => setSuccessModal({\n                    ...successModal, open: false\n                })}\n                onConfirm={callback}\n            >\n                {successModal.msg}\n            </SuccessModal>\n        </div >\n    );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/musicTable.js",["156","157","158"],"import { Col, Image, Row, Table, Button } from \"react-bootstrap\";\n\nexport default function MusicTable({ allNft }) {\n  var i = 1;\n  return (\n    <>\n      <Table\n        className=\"music-table ml-2 mr-2\"\n        borderless={true}\n        bordered={false}\n        striped={false}\n        variant=\"dark\"\n      >\n        <thead>\n          <tr>\n            <th className=\"number-col caption\">#</th>\n            <th className=\"caption\"></th>\n            <th className=\"caption\">TITLE</th>\n            <th className=\"caption\">ARTIST</th>\n            <th className=\"caption\">ALBUM</th>\n            <th className=\"caption time-col\">TIME</th>\n            {/* <th className=\"caption time-col\">PRICE</th> */}\n            <th className=\"caption\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.keys(allNft || {}).map(function (key, _) {\n            if (allNft[key].type === \"music\")\n              return (\n                <tr key={key}>\n                  <td className=\"number-col caption\">{i++}</td>\n                  <td className=\"logo-col\">\n                    <a data-fancybox=\"gallery\" href={allNft[key].baseTokenURI}>\n                      <Image\n                        loading=\"lazy\"\n                        className=\"music-icon mr-2 fadein\"\n                        src={allNft[key].baseTokenURI}\n                        rounded\n                        fluid\n                      />\n                    </a>\n                  </td>\n                  <td>{allNft[key].name}</td>\n                  <td>v.a</td>\n                  <td className=\"caption\">{allNft[key].couponTokenSymbol}</td>\n                  <td className=\"caption time-col\">\n                    {Math.floor(Math.random() * 4) + 1}:\n                    {Math.floor(Math.random() * 60) + 1}\n                  </td>\n                  {/* <td className=\"caption time-col\">\n                    {allNft[key].ticketPrice} {allNft[key].description}\n                  </td> */}\n                  {/* <Button className=\"normal-btn\">Play</Button> */}\n                  <td className=\"text-center\">\n                    <a\n                      data-fancybox\n                      data-type=\"iframe\"\n                      data-src={allNft[key].dataURI}\n                      href=\"javascript:void(0)\"\n                      role=\"button\"\n                      className=\"play-block-btn pt-2\"\n                      type=\"button\"\n                      aria-pressed=\"false\"\n                      aria-label=\"play\"\n                    >\n                      <span className=\"ml-1\">&#x25b6;</span>\n\n                      {/* <span className=\"ml-1\">&#43;</span> */}\n                    </a>\n                  </td>\n                </tr>\n              );\n            return null;\n          })}\n        </tbody>\n      </Table>\n    </>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/playListBlock.js",["159","160","161"],"import { Col, Image, Row, Button } from \"react-bootstrap\";\n\nexport default function PlayListBlock({ allNft }) {\n  const imgSrc = \"/cover.jpeg\";\n\n  return (\n    <div className=\"\">\n      {Object.keys(allNft || {}).map(function (key, i) {\n        if (allNft[key].type === \"playlist\")\n          return (\n            <Row key={key} xs={12} className=\"m-0 mb-5 align-items-center\">\n              <Col xs={2} className=\"\">\n                <a data-fancybox=\"gallery\" href={allNft[key].baseTokenURI}>\n                  <Image\n                    loading=\"lazy\"\n                    className=\"fadein\"\n                    src={allNft[key].baseTokenURI}\n                    rounded\n                    fluid\n                  />\n                </a>\n                {/* \n                <Image\n                  className=\"fadein\"\n                  src={allNft[key].baseTokenURI}\n                  rounded\n                  fluid\n                /> */}\n              </Col>\n              <Col xs={8} className=\"text-left\">\n                <p className=\"mt-2 mb-0\">Playlist</p>\n                <p className=\"display-4 font-weight-bold mb-0\">\n                  {allNft[key].name}\n                </p>\n                <p className=\"display-6 mb-1\">\n                  {allNft[key].couponTokenSymbol}\n                </p>\n\n                <p className=\"caption\">\n                  {Math.floor(Math.random() * 99) + 1} Songs,{\" \"}\n                  {Math.floor(Math.random() * 9) + 1} hr{\" \"}\n                  {Math.floor(Math.random() * 50) + 1} min\n                </p>\n              </Col>\n              <Col xs={2} className=\"text-right\">\n                <a\n                  href={allNft[key].baseTokenURI || allNft[key].dataURI}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  className=\"playlist-btn music-btn\"\n                >\n                  Play\n                </a>\n              </Col>\n            </Row>\n          );\n        return null;\n      })}\n    </div>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/utils/persist.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/config.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/image/imageBlock.js",["162"],"import { Col, Image, Row } from \"react-bootstrap\";\n\nexport default function ImageBlock({ allNft }) {\n  // const imgSrc = \"/cover.jpeg\";\n\n  return (\n    <Col className=\"\">\n      <Row>\n        {Object.keys(allNft || {}).map(function (key, i) {\n          if (allNft[key].type === \"image\")\n            return (\n              <Col key={key} className=\"mb-5 fadein\" xs={2}>\n                <div className=\"image-block\">\n                  <a\n                    href={allNft[key].baseTokenURI}\n                    data-fancybox=\"gallery\"\n                    // target=\"_blank\"\n                    // rel=\"noreferrer\"\n                  >\n                    <Image\n                      loading=\"lazy\"\n                      src={allNft[key].baseTokenURI}\n                      fluid\n                    />\n                  </a>\n                  <p className=\"one-line title text-left pt-1 pl-2 pr-2 pb-1 mb-0\">\n                    {allNft[key].name}\n                  </p>\n                  <p className=\"text-left pb-1 pl-2 pr-2 pt-0  mb-0 caption\">\n                    &hearts; {Math.floor(Math.random() * 85) + 1},\n                    {Math.floor(Math.random() * 800) + 1}\n                  </p>\n                </div>\n              </Col>\n            );\n          return null;\n        })}\n      </Row>\n    </Col>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/time.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/flow/flowBlock.js",["163"],"/* eslint-disable jsx-a11y/anchor-is-valid */\nimport { Col, Image, Row } from \"react-bootstrap\";\n\nexport default function FlowBlock({\n  imgSrc = \"/cover.jpeg\",\n  href = \"\",\n  title = \"Flow\",\n  subTitle = \"Your Personal Soundtrack\",\n  caption = \"Based on your listening history\",\n}) {\n  var bodyWidget = (\n    <div className=\"fadein flow-block\">\n      <Image\n        loading=\"lazy\"\n        className=\"img-bg-flow-block\"\n        src={imgSrc}\n        rounded\n        fluid\n      ></Image>\n      <div className=\"bg-flow-block\"></div>\n      <div className=\"left-bg-flow-block\"></div>\n      <div className=\"content-block\">\n        <Row>\n          <Col className=\"mr-4 cover-block\" xs>\n            <Image\n              loading=\"lazy\"\n              className=\"flow-main-image\"\n              src={imgSrc}\n              rounded\n              height={160}\n              width={160}\n              fluid\n            ></Image>\n            {href && (\n              <div\n                // href={href}\n                // target=\"_blank\"\n                // rel=\"noreferrer\"\n                className=\"cover-block-btn\"\n                // type=\"button\"\n                // aria-pressed=\"false\"\n                // aria-label=\"play\"\n                // role=\"button\"\n              >\n                <span className=\"ml-1 pt-2\">&#x25b6;</span>\n              </div>\n            )}\n          </Col>\n          <Col className=\"align-self-center flow-title-block\" xs>\n            <Row className=\"justify-content-center\">\n              <h6 className=\"flow-body-text mt-2\">{title}</h6>\n            </Row>\n            <Row className=\"justify-content-center\">\n              <p>{subTitle}</p>\n            </Row>\n            <Row className=\"mt-0\"></Row>\n            <Row className=\"justify-content-center\">\n              <p className=\"caption\">{caption}</p>\n            </Row>\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <a\n        data-fancybox\n        data-type=\"iframe\"\n        data-src={href}\n        href=\"javascript:void(0)\"\n      >\n        {bodyWidget}\n      </a>\n    </div>\n  );\n\n  // if (title === \"image\")\n  //   return (\n  //     <div>\n  //       <a href={imgSrc} data-fancybox=\"gallery\">\n  //         {bodyWidget}\n  //       </a>\n  //     </div>\n  //   );\n  // if (title === \"video\")\n  //   return (\n  //     <div>\n  //       <a\n  //         data-fancybox\n  //         data-type=\"iframe\"\n  //         data-src={href}\n  //         href=\"javascript:void(0)\"\n  //       >\n  //         {bodyWidget}\n  //       </a>\n  //     </div>\n  //   );\n  // if (title === \"music\")\n  //   return (\n  //     <div>\n  //       <a\n  //         data-fancybox\n  //         data-type=\"iframe\"\n  //         data-src={href}\n  //         href=\"javascript:void(0)\"\n  //       >\n  //         {bodyWidget}\n  //       </a>\n  //     </div>\n  //   );\n  // return bodyWidget;\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/precision.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/CreateNft.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/video/videoBlock.js",["164"],"import { Col, Image, Row } from \"react-bootstrap\";\n\nimport FlowBlock from \"../flow/flowBlock\";\n\nexport default function VideoBlock({ allNft }) {\n  // const imgSrc = \"/cover.jpeg\";\n\n  return (\n    <Col className=\"\">\n      <Row>\n        {Object.keys(allNft || {}).map(function (key, _i) {\n          if (allNft[key].type === \"video\") {\n            return (\n              <Col key={key} xs={4} className=\"mb-4 fadein\">\n                <FlowBlock\n                  imgSrc={allNft[key].baseTokenURI}\n                  title={allNft[key].type}\n                  subTitle={allNft[key].name}\n                  caption={allNft[key].couponTokenSymbol}\n                  href={allNft[key].dataURI || \"\"}\n                />\n              </Col>\n            );\n          }\n          return null;\n        })}\n      </Row>\n    </Col>\n  );\n}\n",{"ruleId":"165","severity":1,"message":"166","line":23,"column":5,"nodeType":"167","messageId":"168","endLine":23,"endColumn":27},{"ruleId":"169","message":"170","line":60,"column":5,"endLine":60,"endColumn":60,"severity":1,"nodeType":null},{"ruleId":"169","message":"170","line":68,"column":5,"endLine":68,"endColumn":60,"severity":1,"nodeType":null},{"ruleId":"169","message":"170","line":47,"column":5,"endLine":47,"endColumn":60,"severity":1,"nodeType":null},{"ruleId":"171","severity":1,"message":"172","line":55,"column":71,"nodeType":"173","messageId":"174"},{"ruleId":"165","severity":1,"message":"175","line":78,"column":57,"nodeType":"167","messageId":"168","endLine":78,"endColumn":58},{"ruleId":"165","severity":1,"message":"176","line":4,"column":35,"nodeType":"167","messageId":"168","endLine":4,"endColumn":41},{"ruleId":"165","severity":1,"message":"177","line":11,"column":26,"nodeType":"167","messageId":"168","endLine":11,"endColumn":31},{"ruleId":"169","message":"170","line":233,"column":5,"endLine":233,"endColumn":60,"severity":1,"nodeType":null},{"ruleId":"171","severity":1,"message":"172","line":251,"column":29,"nodeType":"173","messageId":"174"},{"ruleId":"171","severity":1,"message":"172","line":395,"column":28,"nodeType":"173","messageId":"174"},{"ruleId":"165","severity":1,"message":"178","line":2,"column":17,"nodeType":"167","messageId":"168","endLine":2,"endColumn":26},{"ruleId":"165","severity":1,"message":"177","line":4,"column":10,"nodeType":"167","messageId":"168","endLine":4,"endColumn":15},{"ruleId":"165","severity":1,"message":"177","line":3,"column":26,"nodeType":"167","messageId":"168","endLine":3,"endColumn":31},{"ruleId":"179","severity":1,"message":"180","line":87,"column":28,"nodeType":"167","messageId":"181","endLine":87,"endColumn":33},{"ruleId":"182","severity":1,"message":"183","line":89,"column":17,"nodeType":"184","messageId":"185","endLine":89,"endColumn":18},{"ruleId":"171","severity":1,"message":"172","line":167,"column":34,"nodeType":"173","messageId":"174"},{"ruleId":"179","severity":1,"message":"180","line":47,"column":28,"nodeType":"167","messageId":"181","endLine":47,"endColumn":33},{"ruleId":"182","severity":1,"message":"183","line":49,"column":17,"nodeType":"184","messageId":"185","endLine":49,"endColumn":18},{"ruleId":"179","severity":1,"message":"180","line":71,"column":28,"nodeType":"167","messageId":"181","endLine":71,"endColumn":33},{"ruleId":"182","severity":1,"message":"183","line":73,"column":17,"nodeType":"184","messageId":"185","endLine":73,"endColumn":18},{"ruleId":"165","severity":1,"message":"186","line":1,"column":10,"nodeType":"167","messageId":"168","endLine":1,"endColumn":13},{"ruleId":"165","severity":1,"message":"187","line":1,"column":22,"nodeType":"167","messageId":"168","endLine":1,"endColumn":25},{"ruleId":"165","severity":1,"message":"188","line":1,"column":34,"nodeType":"167","messageId":"168","endLine":1,"endColumn":40},{"ruleId":"165","severity":1,"message":"188","line":1,"column":27,"nodeType":"167","messageId":"168","endLine":1,"endColumn":33},{"ruleId":"165","severity":1,"message":"189","line":4,"column":9,"nodeType":"167","messageId":"168","endLine":4,"endColumn":15},{"ruleId":"165","severity":1,"message":"175","line":8,"column":53,"nodeType":"167","messageId":"168","endLine":8,"endColumn":54},{"ruleId":"165","severity":1,"message":"175","line":9,"column":55,"nodeType":"167","messageId":"168","endLine":9,"endColumn":56},{"ruleId":"190","message":"191","line":1,"column":1,"endLine":1,"endColumn":46,"severity":1,"nodeType":null},{"ruleId":"165","severity":1,"message":"177","line":1,"column":15,"nodeType":"167","messageId":"168","endLine":1,"endColumn":20},"no-unused-vars","'isConnectWalletSuccess' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Definition for rule 'react-hooks/exhaustive-deps' was not found.","react/no-unescaped-entities","`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","Literal","unescapedEntityAlts","'i' is defined but never used. Allowed unused args must match /^_/u.","'allNft' is defined but never used. Allowed unused args must match /^_/u.","'Image' is defined but never used.","'useEffect' is defined but never used.","no-async-promise-executor","Promise executor functions should not be async.","async","no-unexpected-multiline","Unexpected newline between function and ( of function call.","MemberExpression","function","'Col' is defined but never used.","'Row' is defined but never used.","'Button' is defined but never used.","'imgSrc' is assigned a value but never used.","jsx-a11y/anchor-is-valid","Definition for rule 'jsx-a11y/anchor-is-valid' was not found."]