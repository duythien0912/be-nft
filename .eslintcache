[{"/Users/mac/Desktop/hackathon/bsc-coupon/src/index.js":"1","/Users/mac/Desktop/hackathon/bsc-coupon/src/App.js":"2","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/history.js":"3","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/CreateCoupon.js":"4","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Main.js":"5","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Header.js":"6","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/ViewCoupon.js":"7","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Faucet.js":"8","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/config.js":"9","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/AlertModal.js":"10","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/SuccessModal.js":"11","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Loading.js":"12","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/DisplayTickets.js":"13","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/BuyTicket.js":"14","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Claim.js":"15","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/time.js":"16","/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/precision.js":"17","/Users/mac/Desktop/hackathon/bsc-coupon/src/api/getBnbUsdt.js":"18","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/musicBlock.js":"19","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/image/imageBlock.js":"20","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/video/videoBlock.js":"21","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/flow/flowBlock.js":"22","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/playListBlock.js":"23","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/musicTable.js":"24","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/market/marketPage.js":"25","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/account/accountPage.js":"26","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/CreateNft.js":"27","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/nft/nftPage.js":"28","/Users/mac/Desktop/hackathon/bsc-coupon/src/stores/useWeb3Store.js":"29","/Users/mac/Desktop/hackathon/bsc-coupon/src/utils/persist.js":"30"},{"size":168,"mtime":1622188700418,"results":"31","hashOfConfig":"32"},{"size":3438,"mtime":1622212518969,"results":"33","hashOfConfig":"32"},{"size":93,"mtime":1621608591880,"results":"34","hashOfConfig":"32"},{"size":15464,"mtime":1621608591879,"results":"35","hashOfConfig":"32"},{"size":4668,"mtime":1622215094433,"results":"36","hashOfConfig":"32"},{"size":5087,"mtime":1622212593663,"results":"37","hashOfConfig":"32"},{"size":14210,"mtime":1621666179386,"results":"38","hashOfConfig":"32"},{"size":4587,"mtime":1622211742740,"results":"39","hashOfConfig":"32"},{"size":203,"mtime":1621961636263,"results":"40","hashOfConfig":"32"},{"size":534,"mtime":1621608591878,"results":"41","hashOfConfig":"32"},{"size":643,"mtime":1621608591880,"results":"42","hashOfConfig":"32"},{"size":528,"mtime":1622164031984,"results":"43","hashOfConfig":"32"},{"size":1334,"mtime":1621608591879,"results":"44","hashOfConfig":"32"},{"size":6486,"mtime":1621608591879,"results":"45","hashOfConfig":"32"},{"size":5049,"mtime":1621608591879,"results":"46","hashOfConfig":"32"},{"size":838,"mtime":1621665548570,"results":"47","hashOfConfig":"32"},{"size":351,"mtime":1621665553255,"results":"48","hashOfConfig":"32"},{"size":470,"mtime":1621946606496,"results":"49","hashOfConfig":"32"},{"size":592,"mtime":1621731340919,"results":"50","hashOfConfig":"32"},{"size":1217,"mtime":1622214625542,"results":"51","hashOfConfig":"32"},{"size":824,"mtime":1621961896617,"results":"52","hashOfConfig":"32"},{"size":2775,"mtime":1622215791032,"results":"53","hashOfConfig":"32"},{"size":1953,"mtime":1622214567516,"results":"54","hashOfConfig":"32"},{"size":2769,"mtime":1622216015625,"results":"55","hashOfConfig":"32"},{"size":4390,"mtime":1622216315253,"results":"56","hashOfConfig":"32"},{"size":3604,"mtime":1621954101083,"results":"57","hashOfConfig":"32"},{"size":14683,"mtime":1622212838567,"results":"58","hashOfConfig":"32"},{"size":223,"mtime":1621952476766,"results":"59","hashOfConfig":"32"},{"size":3463,"mtime":1622212966283,"results":"60","hashOfConfig":"32"},{"size":169,"mtime":1622165362210,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1l8faqw",{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"64"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"64"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"/Users/mac/Desktop/hackathon/bsc-coupon/src/index.js",[],["132","133"],"/Users/mac/Desktop/hackathon/bsc-coupon/src/App.js",["134"],"import React, { useEffect } from \"react\";\nimport { PersistGate } from \"zustand-persist\";\nimport AlertModal from \"./components/AlertModal\";\nimport { Switch, HashRouter, Route, Redirect } from \"react-router-dom\";\n\nimport history from \"./components/history\";\nimport Header from \"./components/Header\";\nimport CreateCoupon from \"./components/CreateCoupon\";\nimport MarketPage from \"./components/market/marketPage\";\nimport AccountPage from \"./components/account/accountPage\";\nimport Main from \"./components/Main\";\nimport ViewCoupon from \"./components/ViewCoupon\";\nimport Faucet from \"./components/Faucet\";\nimport NftPage from \"./components/nft/nftPage\";\n\nimport useWeb3Store from \"./stores/useWeb3Store\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const {\n    init,\n    bePublicContract,\n    isWarningWallet,\n    closeModel,\n  } = useWeb3Store();\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  const routes = (\n    <Switch>\n      <Route path=\"/\" exact>\n        <Main />\n      </Route>\n      <Route path=\"/create-coupon\" exact>\n        <CreateCoupon />\n      </Route>\n      <Route path=\"/market\" exact>\n        <MarketPage />\n      </Route>\n      <Route path=\"/account\" exact>\n        <AccountPage />\n      </Route>\n      <Route path=\"/nft\" exact>\n        <NftPage />\n      </Route>\n      <Route path=\"/view/:couponAddress/:nftToken/:buyToken\" exact>\n        <ViewCoupon />\n      </Route>\n      <Route path=\"/token-faucet\" exact>\n        <Faucet />\n      </Route>\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n\n  if (bePublicContract == null) return <></>;\n\n  return (\n    <>\n      <PersistGate>\n        <div className=\"App\">\n          <HashRouter history={history}>\n            <Header />\n            {routes}\n          </HashRouter>\n        </div>\n        <AlertModal\n          open={isWarningWallet}\n          toggle={() => {\n            closeModel();\n          }}\n        >\n          <div>\n            {typeof window.ethereum === \"undefined\" ? (\n              <>\n                <div>You should install Metamask first.</div>\n                <a\n                  className=\"text-break yellow-text\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  href=\"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn\"\n                >\n                  https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn\n                </a>\n              </>\n            ) : (\n              <>\n                <p>\n                  Please connect to Metamask and setup BSC testnet to use.\n                  <br />\n                  <a\n                    className=\"text-break yellow-text\"\n                    href=\"https://academy.binance.com/articles/how-to-use-metamask\"\n                  >\n                    https://academy.binance.com/vi/articles/how-to-use-metamask\n                  </a>\n                </p>\n\n                <p></p>\n                <p>\n                  Hint: you can get some BNB test net on here{\" \"}\n                  <a\n                    className=\"text-break yellow-text\"\n                    href=\"https://testnet.binance.org/faucet-smart\"\n                  >\n                    https://testnet.binance.org/faucet-smart\n                  </a>\n                </p>\n              </>\n            )}\n          </div>\n        </AlertModal>\n      </PersistGate>\n    </>\n  );\n}\n\nexport default App;\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/history.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/CreateCoupon.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Main.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Header.js",["135"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Nav,\n  Navbar,\n  Button,\n  FormControl,\n  InputGroup,\n  Row,\n  Col,\n  Image,\n  Container,\n} from \"react-bootstrap\";\n\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport { getBnbPrice } from \"../api/getBnbUsdt\";\nimport useWeb3Store from \"../stores/useWeb3Store\";\n\nexport default function Header() {\n  const {\n    userAddress,\n    initMetaMask,\n    isConnectWalletSuccess,\n    closeConnectWalletModel,\n    isShowConnectWalletSuccess,\n  } = useWeb3Store();\n\n  const [bnbPrice, setBnbPrice] = useState(\"\");\n  const [errorModal, setErrorModal] = useState(false);\n  const [errorMetamaskInstallModal, setErrorMetamaskInstallModal] = useState(\n    false\n  );\n\n  const handleConnectMetamask = async () => {\n    await initMetaMask();\n  };\n\n  const isHaveUser =\n    typeof userAddress !== \"undefined\" &&\n    userAddress !== null &&\n    userAddress !== \"\";\n\n  useEffect(() => {\n    async function _fetchData() {\n      setBnbPrice(await getBnbPrice());\n      setInterval(async () => {\n        setBnbPrice(await getBnbPrice());\n      }, 3000);\n    }\n    _fetchData();\n  }, []);\n\n  var _userAddress = userAddress;\n  if (userAddress && userAddress.length >= 8) {\n    _userAddress = userAddress.substring(0, 8) + \"...\";\n  }\n\n  return (\n    <>\n      <div className=\"top-navbar-container mb-4\">\n        <Navbar\n          className=\"top-navbar pt-2 pl-5 pr-5\"\n          fixed=\"top\"\n          collapseOnSelect\n          variant=\"dark\"\n        >\n          <Navbar.Brand href=\"#\" className=\"align-items-end\">\n            <img\n              alt=\"\"\n              src=\"/logo-removebg.png\"\n              width=\"42\"\n              height=\"42\"\n              className=\"ml-5 d-inline-block align-top mr-1\"\n            />\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Nav className=\"mr-auto\">\n            <Nav.Link className=\"menu-btn menu-main-btn\" href=\"#market\">\n              Market\n            </Nav.Link>\n            <Nav.Link className=\"menu-btn menu-account\" href=\"#account\">\n              Account\n              <div className=\"menu-dot\"></div>\n            </Nav.Link>\n            <Nav.Link className=\"menu-btn\" href=\"#nft\">\n              NFT\n            </Nav.Link>\n          </Nav>\n          <Nav>\n            <InputGroup className=\"\">\n              <InputGroup.Prepend className=\"search-prepend\">\n                <InputGroup.Text id=\"basic-addon1\">\n                  <span className=\"fa fa-search form-control-feedback\"></span>\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n\n              <FormControl\n                type=\"text\"\n                placeholder=\"Search...\"\n                className=\"header-search mr-sm-2\"\n              />\n            </InputGroup>\n          </Nav>\n          <Nav>\n            {isHaveUser ? (\n              <Nav.Link\n                href=\"#0\"\n                className=\"ml-3 user-profile-menu justify-content-center align-items-center\"\n              >\n                <Row className=\"justify-content-center align-items-center\">\n                  <Image src=\"/user.svg\" className=\"coin-logo mr-2\" />\n                  {_userAddress}\n                </Row>\n              </Nav.Link>\n            ) : (\n              <Button className=\"login-btn\" onClick={handleConnectMetamask}>\n                Connect Metamask\n              </Button>\n            )}\n          </Nav>\n        </Navbar>\n        <AlertModal open={errorModal} toggle={() => setErrorModal(false)}>\n          You should connect with Metamask.\n        </AlertModal>\n\n        <AlertModal\n          open={errorMetamaskInstallModal}\n          toggle={() => setErrorMetamaskInstallModal(false)}\n        >\n          You need install Metamask.\n        </AlertModal>\n\n        <AlertModal\n          open={errorMetamaskInstallModal}\n          toggle={() => setErrorMetamaskInstallModal(false)}\n        >\n          You need install Metamask.\n        </AlertModal>\n\n        <SuccessModal\n          open={isShowConnectWalletSuccess}\n          toggle={() => closeConnectWalletModel()}\n          onConfirm={() => closeConnectWalletModel()}\n        >\n          Connect user Metamask success!\n        </SuccessModal>\n      </div>\n\n      <Container className=\"bnb-price mt-4 pr-3\">\n        <Row>\n          <Col></Col>\n          <div className=\"mr-4 pr-2\">\n            <span style={{ display: \"flex\" }}>\n              <span style={{ height: \"25px\", color: \"transparent\" }}>\n                Loading...\n              </span>\n              {bnbPrice && (\n                <div className=\"fadein\">\n                  <Image src=\"/bnb.png\" className=\"coin-logo\" />\n\n                  <span className=\"coin-name\">1 BNB ≈ </span>\n                  <Image src=\"/usdt.svg\" className=\"coin-logo\" />\n                  <span className=\"coin-name\">\n                    {bnbPrice.substr(0, bnbPrice.length - 6)} USDT\n                  </span>\n                </div>\n              )}\n            </span>\n          </div>\n        </Row>\n      </Container>\n    </>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/ViewCoupon.js",["136"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport history from \"./history\";\nimport Loading from \"./Loading\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport { precision } from \"../web3/precision\";\nimport { time } from \"../web3/time\";\nimport * as erc20Abi from \"../abis/erc20Abi.json\";\nimport * as distCouponAbi from \"../abis/distCoupon.json\";\nimport { Card, Row, Col, Image, Button, CardDeck } from \"react-bootstrap\";\nimport BuyTicket from \"./BuyTicket\";\nimport DisplayTickets from \"./DisplayTickets\";\nimport Claim from \"./Claim\";\n\nexport default function ViewPool() {\n  let routes;\n  const BNB = \"0x2B8fF854c5e16cF35B9A792390Cc3a2a60Ec9ba2\";\n  const USDC = \"0x65471bdCDb3720Dc07B914756884b50a2b4395fb\";\n  const { couponAddress, nftToken, buyToken } = useParams();\n  const [loading, setLoading] = useState(true);\n  const [processing, setProcessing] = useState(false);\n  let [erc20Instance, setErc20Instance] = useState();\n  let [contractInstance, setContractInstance] = useState();\n  const [state, setState] = useState({\n    totalTicket: 0,\n    ticketPrice: 0,\n    distInterval: 0,\n    distCount: 0,\n    couponStartTimestamp: 0,\n    ticketBuyEndTime: 0,\n    nextDistStartTime: 0,\n    nftBalance: 0,\n    tickets: [],\n    couponResult: 0,\n    tokenBaseURI: \"\",\n    isWinnerTicket: false,\n    couponWinnerAddr: \"\",\n    erc20Balance: 0,\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false,\n  });\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false,\n  });\n  const [showBuyTicket, setShowBuyTicket] = useState(false);\n  const [showMetamaskError, setShowMetamaskError] = useState(false);\n\n  const fetchContractData = async () => {\n    try {\n      if (!loading) setLoading(true);\n\n      let result;\n      if (!contractInstance) {\n        result = await createContractInstance();\n      }\n\n      contractInstance = contractInstance ? contractInstance : result.contract;\n      erc20Instance = erc20Instance ? erc20Instance : result.erc20;\n\n      if (contractInstance) {\n        setShowBuyTicket(false);\n\n        const totalTicket = await contractInstance.methods\n          .ticketNumber()\n          .call();\n\n        const ticketPrice = await contractInstance.methods.ticketPrice().call();\n\n        const distInterval = await contractInstance.methods\n          .distInterval()\n          .call();\n\n        const distCount = await contractInstance.methods.distCount().call();\n\n        const couponStartTimestamp = await contractInstance.methods\n          .couponStartTime()\n          .call();\n\n        const ticketBuyEndTime = await contractInstance.methods\n          .ticketBuyEndTime()\n          .call();\n\n        const nextDistStartTime = await contractInstance.methods\n          .getNextDistTimestamp()\n          .call();\n\n        const nftBalance = await contractInstance.methods\n          .balanceOf(window.userAddress)\n          .call();\n\n        const tokenBaseURI = await contractInstance.methods.baseURI().call();\n\n        let couponResult = 0,\n          couponWinnerAddr = \"\";\n        if (\n          Number(distCount) === Number(totalTicket) - 1 &&\n          time.currentUnixTime() > Number(ticketBuyEndTime)\n        ) {\n          couponResult = await contractInstance.methods.getFinalResult().call();\n\n          couponWinnerAddr = await contractInstance.methods\n            .getCouponWinner()\n            .call();\n        }\n\n        let tickets = [],\n          isWinnerTicket = false;\n        for (let i = 0; i < nftBalance; i++) {\n          const ticketNumber = await contractInstance.methods\n            .tokenOfOwnerByIndex(window.userAddress, i)\n            .call();\n\n          const isValid = await contractInstance.methods\n            .stillValidTicket(ticketNumber)\n            .call();\n\n          tickets.push({ ticketNumber, isValid });\n\n          if (Number(couponResult) === Number(ticketNumber)) {\n            isWinnerTicket = true;\n          }\n        }\n\n        let erc20Balance = await precision.remove(\n          await erc20Instance.methods.balanceOf(window.userAddress).call(),\n          await erc20Instance.methods.decimals().call()\n        );\n\n        console.log(\"fd\", window.userAddress + \"/\" + erc20Balance);\n\n        setState({\n          totalTicket,\n          ticketPrice,\n          distInterval,\n          distCount,\n          couponStartTimestamp,\n          ticketBuyEndTime,\n          nextDistStartTime,\n          nftBalance,\n          tickets,\n          couponResult,\n          tokenBaseURI,\n          isWinnerTicket,\n          couponWinnerAddr,\n          erc20Balance,\n        });\n\n        setLoading(false);\n      }\n    } catch (error) {\n      setErrorModal({\n        open: true,\n        msg: error.message,\n      });\n    }\n  };\n\n  const createContractInstance = () => {\n    return new Promise((resolve, reject) => {\n      try {\n        const contract = new window.web3.eth.Contract(\n          distCouponAbi.default,\n          couponAddress,\n          { from: window.userAddress }\n        );\n\n        const erc20 = new window.web3.eth.Contract(\n          erc20Abi.default,\n          buyToken === \"BNB\" ? BNB : USDC,\n          { from: window.userAddress }\n        );\n\n        console.log(\"dss\", erc20);\n\n        setErc20Instance(erc20);\n        setContractInstance(contract);\n        resolve({ contract, erc20 });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  const handleDist = () => {\n    contractInstance.methods\n      .dist(generateRandom())\n      .send()\n      .on(\"transactionHash\", () => {\n        setProcessing(true);\n      })\n      .on(\"receipt\", () => {\n        setProcessing(false);\n        fetchContractData();\n      })\n      .catch((error) => {\n        setProcessing(false);\n        setErrorModal({\n          open: true,\n          msg: error.message,\n        });\n      });\n  };\n\n  const generateRandom = () => {\n    return Math.floor(Math.random() * 10 ** 15);\n  };\n\n  const getTokenSymbol = () => {\n    return buyToken === \"BNB\" ? \"BNB\" : \"USDC\";\n  };\n\n  useEffect(() => {\n    if (\n      typeof window.ethereum === \"undefined\" ||\n      !window.ethereum.isConnected() ||\n      !window.ethereum.selectedAddress\n    ) {\n      setLoading(false);\n      setShowMetamaskError(true);\n    }\n\n    if (\n      typeof window.ethereum !== \"undefined\" &&\n      window.ethereum.selectedAddress &&\n      window.ethereum.isConnected()\n    ) {\n      fetchContractData();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (loading) {\n    routes = <Loading />;\n  } else {\n    routes = (\n      <div>\n        {showMetamaskError ? (\n          <AlertModal\n            open={showMetamaskError}\n            toggle={() => {\n              setShowMetamaskError(false);\n              history.push(\"/\");\n            }}\n          >\n            <div>\n              {typeof window.ethereum === \"undefined\" ? (\n                <div>You can't use these features without Metamask.</div>\n              ) : (\n                <div>Please connect to Metamask to use this feature !!</div>\n              )}\n            </div>\n          </AlertModal>\n        ) : (\n          <CardDeck>\n            <Card className=\"hidden-card\"></Card>\n\n            <Card className=\"mx-auto view-pool-card\">\n              <Card.Body style={{ textAlign: \"left\", fontWeight: \"bold\" }}>\n                <p className=\"view-pool-header\">\n                  <u>Distribution Coupon</u>\n                </p>\n\n                <Row style={{ paddingBottom: \"20px\" }}>\n                  <Col>\n                    <u>Total Tickets</u>\n                    <span> :</span>\n                    <span className=\"float-right\">{state.totalTicket}</span>\n                  </Col>\n\n                  <Col>\n                    <u>Ticket Price</u>\n                    <span> :</span>\n                    <span className=\"float-right\">\n                      <span>{state.ticketPrice} </span>\n                      {getTokenSymbol()}\n                    </span>\n                  </Col>\n                </Row>\n\n                <Row style={{ paddingBottom: \"20px\" }}>\n                  <Col>\n                    <u>Distribution Complete</u>\n                    <span> :</span>\n                    <span className=\"float-right\">{state.distCount}</span>\n                  </Col>\n\n                  <Col>\n                    <u>NFT Token</u>\n                    <span> :</span>\n                    <span className=\"float-right\">\n                      {state.tokenBaseURI !== \"\" ? (\n                        <a\n                          target=\"_blank\"\n                          href={state.tokenBaseURI}\n                          rel=\"noreferrer noopener\"\n                        >\n                          {nftToken}\n                        </a>\n                      ) : (\n                        <div>{nftToken}</div>\n                      )}\n                    </span>\n                  </Col>\n                </Row>\n\n                {Number(state.nextDistStartTime) > time.currentUnixTime() ? (\n                  <Row className=\"text-center\">\n                    <Col>\n                      <u>Next Distribution In</u>\n                      <span> : </span>\n                      <span>\n                        {time.getRemainingTime(state.nextDistStartTime)}\n                      </span>\n                    </Col>\n                  </Row>\n                ) : Number(state.distCount) === Number(state.totalTicket) - 1 &&\n                  Number(state.distCount) > 0 ? (\n                  <div>\n                    <div className=\"auction-alert-message\">\n                      Token Already Closed\n                    </div>\n                    <div className=\"auction-info-message\">\n                      Result: {state.tokenResult}\n                    </div>\n                  </div>\n                ) : null}\n\n                {time.currentUnixTime() > Number(state.nextDistStartTime) &&\n                Number(state.distCount) < Number(state.totalTicket) - 1 ? (\n                  <Row className=\"text-center\">\n                    <Col>\n                      <Button variant=\"info\" onClick={handleDist}>\n                        {processing ? (\n                          <div className=\"d-flex align-items-center\">\n                            Processing\n                            <span className=\"loading ml-2\"></span>\n                          </div>\n                        ) : (\n                          <div>Execute Distribution</div>\n                        )}\n                      </Button>\n\n                      <div className=\"info-message\">\n                        You will get {Number(state.ticketPrice) / 100}{\" \"}\n                        {getTokenSymbol()}\n                        <span> for executing this distribution.</span>\n                      </div>\n                    </Col>\n                  </Row>\n                ) : null}\n\n                {state.nftBalance > 0 ? (\n                  <DisplayTickets\n                    nftBalance={state.nftBalance}\n                    tickets={state.tickets}\n                  />\n                ) : null}\n\n                {showBuyTicket ? (\n                  <BuyTicket\n                    couponAddress={couponAddress}\n                    contractInstance={contractInstance}\n                    erc20Instance={erc20Instance}\n                    buyToken={buyToken === \"BNB\" ? \"BNB\" : \"USDC\"}\n                    availableBalance={state.erc20Balance}\n                    balanceNeeded={state.ticketPrice}\n                    callback={fetchContractData}\n                  />\n                ) : null}\n\n                {Number(state.isWinnerTicket) !== 0 ? (\n                  <Claim\n                    couponAddress={couponAddress}\n                    contractInstance={contractInstance}\n                    ticketNumber={state.couponResult}\n                    callback={fetchContractData}\n                  />\n                ) : Number(state.distCount) === Number(state.totalTicket) - 1 &&\n                  Number(state.distCount) > 0 &&\n                  Number(state.nftBalance) > 0 ? (\n                  state.couponWinnerAddr === window.userAddress ? (\n                    <div className=\"info-message\">\n                      You have already claimed your coupon for ticket number{\" \"}\n                      {state.couponResult}\n                    </div>\n                  ) : null\n                ) : Number(state.nftBalance) > 0 &&\n                  Number(state.distCount) > 0 &&\n                  Number(state.distCount) === Number(state.totalTicket) - 1 ? (\n                  <div className=\"info-message\">\n                    You don't have winner ticket.\n                  </div>\n                ) : null}\n              </Card.Body>\n\n              {time.currentUnixTime() < Number(state.ticketBuyEndTime) ? (\n                <Card.Footer className=\"view-pool-footer\">\n                  <Button\n                    onClick={() => setShowBuyTicket(true)}\n                    variant=\"success\"\n                  >\n                    {state.nftBalance > 0 ? (\n                      <div>Buy More Ticket</div>\n                    ) : (\n                      <div>Want to Buy Ticket ?</div>\n                    )}\n                  </Button>\n                </Card.Footer>\n              ) : Number(state.nftBalance) === 0 ? (\n                <div className=\"alert-message\">Participation time over.</div>\n              ) : (\n                <div style={{ marginBottom: \"20px\" }}></div>\n              )}\n            </Card>\n\n            <Card className=\"hidden-card\"></Card>\n          </CardDeck>\n        )}\n\n        <AlertModal\n          open={errorModal.open}\n          toggle={() =>\n            setErrorModal({\n              ...errorModal,\n              open: false,\n            })\n          }\n        >\n          {errorModal.msg}\n        </AlertModal>\n\n        <SuccessModal\n          open={successModal.open}\n          toggle={() =>\n            setSuccessModal({\n              ...successModal,\n              open: false,\n            })\n          }\n        >\n          {successModal.msg}\n        </SuccessModal>\n      </div>\n    );\n  }\n\n  return routes;\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Faucet.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/config.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/AlertModal.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/SuccessModal.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Loading.js",["137"],"import React from \"react\";\n\nimport ReactLoading from \"react-loading\";\nimport { Image } from \"react-bootstrap\";\n\nexport default function Loading({ paddingTop = 90 }) {\n  return (\n    <div\n      className={`d-flex justify-content-center mt-5 g-pt-${paddingTop}`}\n      style={{ height: \"-webkit-fill-available\" }}\n    >\n      <ReactLoading\n        type={\"spin\"}\n        color={\"#343a40\"}\n        height={\"6%\"}\n        width={\"6%\"}\n      />\n      {/* <Image src=\"/loading.gif\" height={\"60%\"} width={\"60%\"} /> */}\n    </div>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/DisplayTickets.js",["138"],"import React from \"react\";\n\nimport { Row, Col, Card, Image } from \"react-bootstrap\";\n\nexport default function DisplayTickets({\n    nftBalance,\n    tickets,\n}) {\n    return (\n        <Card\n            className=\"mx-auto form-card text-center\"\n            style={{ backgroundColor: \"rgb(253, 255, 255)\" }}\n        >\n            <Card.Header>\n                <u>Your Tickets</u>\n            </Card.Header>\n\n            <Card.Body>\n                <div style={{ marginBottom: \"20px\", color: \"green\", fontSize: \"large\" }}>\n                    You have {nftBalance} Tickets\n                </div>\n\n                {tickets.map((ticket, key) => (\n                    <Row key={key} className=\"text-center\" style={{ paddingBottom: \"20px\" }}>\n                        <Col>\n                            <u>Ticket Number</u>\n                            <span> : </span>\n                            <span>{ticket.ticketNumber}</span>\n                        </Col>\n                        <Col>\n                            <u>Still Valid</u>\n                            <span> : </span>\n                            {ticket.isValid ?\n                                    'yes' :\n                                    'no'}\n                        </Col>\n                    </Row>\n                ))}\n            </Card.Body>\n        </Card>\n    );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/BuyTicket.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/Claim.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/time.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/web3/precision.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/api/getBnbUsdt.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/musicBlock.js",[],["139","140"],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/image/imageBlock.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/video/videoBlock.js",["141"],"import { Col, Image, Row } from \"react-bootstrap\";\n\nimport FlowBlock from \"../flow/flowBlock\";\n\nexport default function VideoBlock({ allNft }) {\n  // const imgSrc = \"/cover.jpeg\";\n\n  return (\n    <Col className=\"\">\n      <Row>\n        {Object.keys(allNft || {}).map(function (key, i) {\n          if (allNft[key].type === \"video\") {\n            return (\n              <Col key={key} xs={4} className=\"mb-4 fadein\">\n                <FlowBlock\n                  imgSrc={allNft[key].baseTokenURI}\n                  title={allNft[key].type}\n                  subTitle={allNft[key].name}\n                  caption={allNft[key].couponTokenSymbol}\n                  href={allNft[key].dataURI || \"\"}\n                />\n              </Col>\n            );\n          }\n          return null;\n        })}\n      </Row>\n    </Col>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/flow/flowBlock.js",["142"],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/playListBlock.js",["143","144"],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/music/musicTable.js",["145","146","147","148","149"],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/market/marketPage.js",["150","151"],"/Users/mac/Desktop/hackathon/bsc-coupon/src/components/account/accountPage.js",["152"],"import { Col, Image, Row, Container, Button, Nav } from \"react-bootstrap\";\nimport React, { useEffect, useState } from \"react\";\n\nimport ImageBlock from \"../image/imageBlock\";\nimport MusicTable from \"../music/musicTable\";\nimport VideoBlock from \"../video/videoBlock\";\nimport CreateNft from \"../CreateNft\";\n\nimport \"./accountPage.css\";\n\nexport default function AccountPage() {\n  var profileImg = \"/profile.svg\";\n  const [bodyTabKey, setTabKey] = useState(\"mintNFT\");\n\n  return (\n    <>\n      <Container className=\"w-75  \">\n        <div className=\"mt-5 pt-5 fadein\"></div>\n        <Row className=\"justify-content-center mb-4\">\n          <Image className=\"ml-4\" roundedCircle fluid src={profileImg}></Image>\n          <Col className=\"text-left pt-2\">\n            <p className=\"display-6 mb-1 font-weight-bold\">Anonymous</p>\n            <p>{window.userAddress}</p>\n          </Col>\n          <Button className=\"align-self-center text-center normal-btn\">\n            EDIT\n          </Button>\n        </Row>\n\n        <Nav\n          bg=\"dark\"\n          variant=\"dark\"\n          onSelect={(k) => setTabKey(k)}\n          defaultActiveKey={bodyTabKey}\n        >\n          {/* <Nav.Item>\n            <Nav.Link\n              className={`tab-title font-weight-bold display-6 ${\n                bodyTabKey && bodyTabKey === \"myNFT\" && \"tab-title-active\"\n              }`}\n              eventKey=\"myNFT\"\n            >\n              MY NFTS\n            </Nav.Link>\n          </Nav.Item> */}\n          <Nav.Item>\n            <Nav.Link\n              className={`tab-title font-weight-bold display-6 ${\n                bodyTabKey && bodyTabKey === \"mintNFT\" && \"tab-title-active\"\n              }`}\n              eventKey=\"mintNFT\"\n            >\n              MINT NFTS\n            </Nav.Link>\n          </Nav.Item>\n          {/* <Nav.Item>\n            <Nav.Link\n              className={`tab-title font-weight-bold display-6 ${\n                bodyTabKey &&\n                bodyTabKey === \"configAccount\" &&\n                \"tab-title-active\"\n              }`}\n              eventKey=\"configAccount\"\n            >\n              CONFIG\n            </Nav.Link>\n          </Nav.Item> */}\n        </Nav>\n\n        {bodyTabKey && bodyTabKey === \"myNFT\" && (\n          <div className=\"fadein\">\n            <Container className=\"mt-4\">\n              <Col>\n                <Row className=\"\">\n                  <h2 className=\"font-weight-bold display-6\">Music</h2>\n                </Row>\n              </Col>\n            </Container>\n            <MusicTable />\n            <div className=\"dropdown-divider m-5\"></div>\n            <Container className=\"mb-3\">\n              <Col>\n                <Row className=\"\">\n                  <h2 className=\"font-weight-bold display-6\">Image</h2>\n                </Row>\n              </Col>\n            </Container>\n            <ImageBlock />\n            <div className=\"dropdown-divider m-5\"></div>\n            <Container className=\"mb-3\">\n              <Col>\n                <Row className=\"\">\n                  <h2 className=\"font-weight-bold display-6\">Video</h2>\n                </Row>\n              </Col>\n            </Container>\n            <VideoBlock />\n          </div>\n        )}\n        {bodyTabKey && bodyTabKey === \"mintNFT\" && (\n          <>\n            <div className=\"fadein mb-5 pb-5\">\n              <CreateNft />\n            </div>\n          </>\n        )}\n        {bodyTabKey && bodyTabKey === \"configAccount\" && (\n          <div className=\"fadein\">\n            <p className=\"mt-5 pt-5 display-2\">COMING SOON</p>\n          </div>\n        )}\n      </Container>\n    </>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/CreateNft.js",["153"],"import React, { useEffect, useState } from \"react\";\nimport ipfsClient from \"ipfs-http-client\";\nimport AlertModal from \"./AlertModal\";\nimport SuccessModal from \"./SuccessModal\";\nimport history from \"./history\";\nimport Loading from \"./Loading\";\n\nimport useWeb3Store from \"../stores/useWeb3Store\";\n\nimport {\n  Row,\n  Col,\n  Form,\n  Card,\n  Image,\n  Button,\n  CardDeck,\n  Dropdown,\n  DropdownButton,\n} from \"react-bootstrap\";\n\nexport default function CreateNft() {\n  const { userAddress, beUserContract, initMetaMask } = useWeb3Store();\n\n  const [loading, setLoading] = useState(true);\n  const [deploying, setDeploying] = useState(false);\n  const [processing, setProcessing] = useState(false);\n\n  const [addCouponState, setAddCouponState] = useState({\n    couponTokenName: \"\",\n    couponType: \"music\",\n    couponDescription: \"\",\n    couponTokenSymbol: \"BNB\",\n    ticketPrice: \"\",\n    distInterval: \"\",\n    ticketBuyDuration: \"\",\n    ticketBuyToken: \"0x2B8fF854c5e16cF35B9A792390Cc3a2a60Ec9ba2\",\n    image: null,\n    data: null,\n  });\n\n  const [showMetamaskError, setShowMetamaskError] = useState(false);\n  const [errorModal, setErrorModal] = useState({\n    msg: \"\",\n    open: false,\n  });\n  const [successModal, setSuccessModal] = useState({\n    msg: \"\",\n    open: false,\n  });\n  const [tokens] = useState([\n    { name: \"BNB\", address: \"0x2B8fF854c5e16cF35B9A792390Cc3a2a60Ec9ba2\" },\n    { name: \"USDC\", address: \"0x65471bdCDb3720Dc07B914756884b50a2b4395fb\" },\n  ]);\n\n  const [nftType] = useState([\n    { name: \"Music\", value: \"music\" },\n    { name: \"Image\", value: \"image\" },\n    { name: \"Video\", value: \"video\" },\n    { name: \"Playlist\", value: \"playlist\" },\n  ]);\n\n  const ipfs = ipfsClient({\n    host: \"ipfs.infura.io\",\n    port: 5001,\n    protocol: \"https\",\n  });\n\n  const handleCreateCoupon = async () => {\n    let tokenBaseUrl = \"\";\n    let dataBaseUrl = \"\";\n\n    if (addCouponState.image) {\n      setDeploying(true);\n      const ipfsHash = await deployImage();\n      tokenBaseUrl = `https://ipfs.io/ipfs/${ipfsHash}`;\n      setDeploying(false);\n    }\n\n    if (addCouponState.data) {\n      setDeploying(true);\n      const ipfsHash = await deployDataFile();\n      dataBaseUrl = `https://ipfs.io/ipfs/${ipfsHash}`;\n      setDeploying(false);\n    }\n\n    if (addCouponState.image === null) {\n      setErrorModal({\n        open: true,\n        msg: \"Please upload Thumbnail Image\",\n      });\n      return;\n    }\n\n    if (\n      addCouponState.data === null &&\n      (addCouponState.couponType === \"music\" ||\n        addCouponState.couponType === \"video\")\n    ) {\n      setErrorModal({\n        open: true,\n        msg: \"Please upload Data File when choose music or video NFT type\",\n      });\n      return;\n    }\n\n    console.log(addCouponState);\n\n    beUserContract.methods\n      .addCoupon(\n        `${addCouponState.couponType}|${addCouponState.couponTokenName}`,\n        addCouponState.couponDescription,\n        addCouponState.couponTokenSymbol,\n        addCouponState.ticketBuyToken,\n        addCouponState.ticketPrice,\n        // addCouponState.distInterval,\n        // addCouponState.ticketBuyDuration,\n        tokenBaseUrl,\n        dataBaseUrl\n      )\n      .send()\n      .on(\"transactionHash\", () => {\n        setProcessing(true);\n      })\n      .on(\"receipt\", (_) => {\n        console.log(\"receipt: \", _);\n        setProcessing(false);\n        setSuccessModal({\n          open: true,\n          msg: `Nft successfully created with hash !!\\nhttps://testnet.bscscan.com/tx/${_.transactionHash}`,\n        });\n      })\n      .catch((error) => {\n        setProcessing(false);\n        setErrorModal({\n          open: true,\n          msg: error.message,\n        });\n        console.log(error.message);\n      });\n  };\n\n  const deployImage = () => {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(addCouponState.image);\n\n      reader.onloadend = async () => {\n        const files = [\n          {\n            path: addCouponState.image.name,\n            content: reader.result,\n          },\n        ];\n\n        for await (const result of ipfs.addAll(files)) {\n          resolve(result.cid.string);\n        }\n      };\n    });\n  };\n\n  const deployDataFile = () => {\n    return new Promise((resolve) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(addCouponState.data);\n\n      reader.onloadend = async () => {\n        const files = [\n          {\n            path: addCouponState.data.name,\n            content: reader.result,\n          },\n        ];\n\n        for await (const result of ipfs.addAll(files)) {\n          resolve(result.cid.string);\n        }\n      };\n    });\n  };\n  function sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  useEffect(() => {\n    sleep(1000).then(async (_) => {\n      setLoading(false);\n    });\n  }, []);\n\n  if (loading) return <Loading paddingTop={40} />;\n\n  if (!userAddress || !beUserContract)\n    return (\n      <>\n        <p\n          style={{\n            letterSpacing: \"0.1rem\",\n          }}\n          className=\"display-6 font-weight-bold pt-5 mt-5 mb-4\"\n        >\n          PLEASE CONNECT YOUR WALLET\n          <br />& SELECT THE BSC TESTNET.\n        </p>\n        <Button className=\"login-btn\" onClick={initMetaMask}>\n          Connect Metamask\n        </Button>\n      </>\n    );\n\n  return (\n    <div style={{ marginTop: \"5%\" }}>\n      {showMetamaskError ? (\n        <AlertModal\n          open={showMetamaskError}\n          toggle={() => {\n            setShowMetamaskError(false);\n            history.push(\"/\");\n          }}\n        >\n          <div>\n            {typeof ethereum === \"undefined\" ? (\n              <div>You should install Metamask first.</div>\n            ) : (\n              <div>Please connect to Metamask.</div>\n            )}\n          </div>\n        </AlertModal>\n      ) : (\n        <CardDeck>\n          {/* <Card className=\"hidden-card\"></Card> */}\n\n          <Card className=\"w-50 text-left mx-auto create-card\">\n            <Card.Body>\n              <Row style={{ marginTop: \"10px\" }}>\n                <Col className=\"text-header\">Name:</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <Form.Control\n                    className=\"mb-4\"\n                    type=\"text\"\n                    placeholder=\"NFT Name\"\n                    onChange={(e) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        couponTokenName: e.target.value,\n                      })\n                    }\n                    style={{ width: \"80%\" }}\n                    value={addCouponState.couponTokenName}\n                    required\n                  />\n                </Col>\n              </Row>\n\n              <Row style={{ marginTop: \"10px\" }}>\n                <Col className=\"text-header\">Description:</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <Form.Control\n                    className=\"mb-4\"\n                    type=\"text\"\n                    placeholder=\"NFT Description\"\n                    onChange={(e) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        couponDescription: e.target.value,\n                      })\n                    }\n                    style={{ width: \"80%\" }}\n                    value={addCouponState.couponDescription}\n                    required\n                  />\n                </Col>\n              </Row>\n\n              {/* <Row>\n                <Col className=\"text-header\">Coupon Token Symbol:</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <Form.Control\n                    className=\"mb-4\"\n                    type=\"text\"\n                    placeholder=\"NFT Token Symbol\"\n                    onChange={(e) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        couponTokenSymbol: e.target.value,\n                      })\n                    }\n                    style={{ width: \"80%\" }}\n                    value={addCouponState.couponTokenSymbol}\n                    required\n                  />\n                </Col>\n              </Row> */}\n\n              <Row>\n                <Col className=\"text-header\">Price (BNB):</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <Form.Control\n                    className=\"mb-4\"\n                    type=\"number\"\n                    step=\"0\"\n                    placeholder=\"Price of the NFT\"\n                    onChange={(e) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        ticketPrice: e.target.value,\n                      })\n                    }\n                    style={{ width: \"80%\" }}\n                    value={addCouponState.ticketPrice}\n                    required\n                  />\n                </Col>\n              </Row>\n\n              {/* <Row style={{ marginBottom: \"30px\" }}>\n                <Col className=\"text-header\">Token For Buy:</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <DropdownButton\n                    style={{\n                      position: \"absolute\",\n                    }}\n                    title={tokens.map((element) =>\n                      addCouponState.ticketBuyToken === element.address\n                        ? element.name\n                        : null\n                    )}\n                    variant=\"outline-info\"\n                    onSelect={(event) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        ticketBuyToken: event,\n                      })\n                    }\n                  >\n                    {tokens.map((element, key) => (\n                      <Dropdown.Item key={key} eventKey={element.address}>\n                        {element.name}\n                      </Dropdown.Item>\n                    ))}\n                  </DropdownButton>\n                </Col>\n              </Row> */}\n\n              <Row style={{ marginBottom: \"30px\" }}>\n                <Col className=\"text-header\">Type:</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <DropdownButton\n                    style={{\n                      position: \"absolute\",\n                    }}\n                    title={nftType.map((element) =>\n                      addCouponState.couponType === element.value\n                        ? element.name\n                        : null\n                    )}\n                    variant=\"outline-info\"\n                    onSelect={(event) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        couponType: event,\n                      })\n                    }\n                  >\n                    {nftType.map((element, key) => (\n                      <Dropdown.Item key={key} eventKey={element.value}>\n                        {element.name}\n                      </Dropdown.Item>\n                    ))}\n                  </DropdownButton>\n                </Col>\n              </Row>\n\n              <Row>\n                <Col className=\"text-header\">Thumbnail Image:</Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  <Form.Control\n                    className=\"mb-4\"\n                    type=\"file\"\n                    onChange={(event) =>\n                      setAddCouponState({\n                        ...addCouponState,\n                        image: event.target.files[0],\n                      })\n                    }\n                    style={{ width: \"80%\" }}\n                    required\n                  />\n                </Col>\n              </Row>\n\n              <Row>\n                <Col className=\"\"></Col>\n                <Col style={{ paddingLeft: \"0px\" }}>\n                  {addCouponState.image ? (\n                    <Row>\n                      <Col>\n                        <Image\n                          src={URL.createObjectURL(addCouponState.image)}\n                          width=\"150\"\n                          height=\"150\"\n                        ></Image>\n                      </Col>\n                    </Row>\n                  ) : null}\n                </Col>\n              </Row>\n\n              {addCouponState.couponType !== \"image\" &&\n                addCouponState.couponType !== \"playlist\" && (\n                  <>\n                    <Row className={addCouponState.image && \"mt-4\"}>\n                      <Col className=\"text-header\">\n                        Data file (Music/Image/Video):\n                      </Col>\n                      <Col style={{ paddingLeft: \"0px\" }}>\n                        <Form.Control\n                          className=\"mb-4\"\n                          type=\"file\"\n                          onChange={(event) =>\n                            setAddCouponState({\n                              ...addCouponState,\n                              data: event.target.files[0],\n                            })\n                          }\n                          style={{ width: \"80%\" }}\n                          required\n                        />\n                      </Col>\n                    </Row>\n                  </>\n                )}\n            </Card.Body>\n\n            <Card.Footer className=\"text-center\">\n              <Button onClick={handleCreateCoupon} variant=\"outline-success\">\n                {deploying ? (\n                  <div className=\"d-flex align-items-center\">\n                    <span>Deploying to IPFS</span>\n\n                    <span className=\"loading ml-2\"></span>\n                  </div>\n                ) : processing ? (\n                  <div className=\"d-flex align-items-center\">\n                    Processing\n                    <span className=\"loading ml-2\"></span>\n                  </div>\n                ) : (\n                  <div>Submit</div>\n                )}\n              </Button>\n            </Card.Footer>\n          </Card>\n\n          {/* <Card className=\"hidden-card\"></Card> */}\n        </CardDeck>\n      )}\n\n      <AlertModal\n        open={errorModal.open}\n        toggle={() =>\n          setErrorModal({\n            ...errorModal,\n            open: false,\n          })\n        }\n      >\n        {errorModal.msg}\n      </AlertModal>\n\n      <SuccessModal\n        open={successModal.open}\n        toggle={() =>\n          setSuccessModal({\n            ...successModal,\n            open: false,\n          })\n        }\n        onConfirm={() => history.push(\"/\")}\n      >\n        {successModal.msg}\n      </SuccessModal>\n    </div>\n  );\n}\n","/Users/mac/Desktop/hackathon/bsc-coupon/src/components/nft/nftPage.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/stores/useWeb3Store.js",[],"/Users/mac/Desktop/hackathon/bsc-coupon/src/utils/persist.js",[],{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":31,"column":6,"nodeType":"160","endLine":31,"endColumn":8,"suggestions":"161"},{"ruleId":"162","severity":1,"message":"163","line":23,"column":5,"nodeType":"164","messageId":"165","endLine":23,"endColumn":27},{"ruleId":"162","severity":1,"message":"166","line":11,"column":26,"nodeType":"164","messageId":"165","endLine":11,"endColumn":31},{"ruleId":"162","severity":1,"message":"166","line":4,"column":10,"nodeType":"164","messageId":"165","endLine":4,"endColumn":15},{"ruleId":"162","severity":1,"message":"166","line":3,"column":26,"nodeType":"164","messageId":"165","endLine":3,"endColumn":31},{"ruleId":"154","replacedBy":"167"},{"ruleId":"156","replacedBy":"168"},{"ruleId":"162","severity":1,"message":"166","line":1,"column":15,"nodeType":"164","messageId":"165","endLine":1,"endColumn":20},{"ruleId":"169","severity":1,"message":"170","line":65,"column":14,"nodeType":"171","messageId":"172","endLine":65,"endColumn":34},{"ruleId":"162","severity":1,"message":"173","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":33},{"ruleId":"162","severity":1,"message":"174","line":4,"column":9,"nodeType":"164","messageId":"165","endLine":4,"endColumn":15},{"ruleId":"162","severity":1,"message":"175","line":1,"column":10,"nodeType":"164","messageId":"165","endLine":1,"endColumn":13},{"ruleId":"162","severity":1,"message":"176","line":1,"column":22,"nodeType":"164","messageId":"165","endLine":1,"endColumn":25},{"ruleId":"162","severity":1,"message":"173","line":1,"column":34,"nodeType":"164","messageId":"165","endLine":1,"endColumn":40},{"ruleId":"177","severity":1,"message":"178","line":54,"column":21,"nodeType":"179","endLine":64,"endColumn":22},{"ruleId":"169","severity":1,"message":"170","line":58,"column":28,"nodeType":"171","messageId":"172","endLine":58,"endColumn":48},{"ruleId":"177","severity":1,"message":"178","line":84,"column":23,"nodeType":"179","endLine":95,"endColumn":24},{"ruleId":"169","severity":1,"message":"170","line":94,"column":30,"nodeType":"171","messageId":"172","endLine":94,"endColumn":50},{"ruleId":"162","severity":1,"message":"180","line":2,"column":17,"nodeType":"164","messageId":"165","endLine":2,"endColumn":26},{"ruleId":"162","severity":1,"message":"181","line":51,"column":10,"nodeType":"164","messageId":"165","endLine":51,"endColumn":16},"no-native-reassign",["182"],"no-negated-in-lhs",["183"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'init'. Either include it or remove the dependency array.","ArrayExpression",["184"],"no-unused-vars","'isConnectWalletSuccess' is assigned a value but never used.","Identifier","unusedVar","'Image' is defined but never used.",["182"],["183"],"no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","'Button' is defined but never used.","'imgSrc' is assigned a value but never used.","'Col' is defined but never used.","'Row' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","'tokens' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"185","fix":"186"},"Update the dependencies array to be: [init]",{"range":"187","text":"188"},[919,921],"[init]"]